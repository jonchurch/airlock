/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AcceptContract200Response } from '../models';
// @ts-ignore
import { DeliverContract200Response } from '../models';
// @ts-ignore
import { DeliverContractRequest } from '../models';
// @ts-ignore
import { FulfillContract200Response } from '../models';
// @ts-ignore
import { GetContract200Response } from '../models';
// @ts-ignore
import { GetContracts200Response } from '../models';
/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a contract by ID.   You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
         * @summary Accept Contract
         * @param {any} contractId The contract ID to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptContract: async (contractId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('acceptContract', 'contractId', contractId)
            const localVarPath = `/my/contracts/{contractId}/accept`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deliver cargo to a contract.  In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.  Cargo that was delivered will be removed from the ship\'s cargo.
         * @summary Deliver Cargo to Contract
         * @param {any} contractId The ID of the contract.
         * @param {DeliverContractRequest} [deliverContractRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliverContract: async (contractId: any, deliverContractRequest?: DeliverContractRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('deliverContract', 'contractId', contractId)
            const localVarPath = `/my/contracts/{contractId}/deliver`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deliverContractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
         * @summary Fulfill Contract
         * @param {any} contractId The ID of the contract to fulfill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fulfillContract: async (contractId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('fulfillContract', 'contractId', contractId)
            const localVarPath = `/my/contracts/{contractId}/fulfill`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a contract by ID.
         * @summary Get Contract
         * @param {any} contractId The contract ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract: async (contractId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('getContract', 'contractId', contractId)
            const localVarPath = `/my/contracts/{contractId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a paginated list of all your contracts.
         * @summary List Contracts
         * @param {any} [page] What entry offset to request
         * @param {any} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts: async (page?: any, limit?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept a contract by ID.   You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
         * @summary Accept Contract
         * @param {any} contractId The contract ID to accept.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptContract(contractId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcceptContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptContract(contractId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deliver cargo to a contract.  In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.  Cargo that was delivered will be removed from the ship\'s cargo.
         * @summary Deliver Cargo to Contract
         * @param {any} contractId The ID of the contract.
         * @param {DeliverContractRequest} [deliverContractRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliverContract(contractId: any, deliverContractRequest?: DeliverContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliverContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliverContract(contractId, deliverContractRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
         * @summary Fulfill Contract
         * @param {any} contractId The ID of the contract to fulfill.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fulfillContract(contractId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FulfillContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fulfillContract(contractId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of a contract by ID.
         * @summary Get Contract
         * @param {any} contractId The contract ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContract(contractId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContract(contractId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a paginated list of all your contracts.
         * @summary List Contracts
         * @param {any} [page] What entry offset to request
         * @param {any} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContracts(page?: any, limit?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContracts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContracts(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractsApiFp(configuration)
    return {
        /**
         * Accept a contract by ID.   You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
         * @summary Accept Contract
         * @param {ContractsApiAcceptContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptContract(requestParameters: ContractsApiAcceptContractRequest, options?: AxiosRequestConfig): AxiosPromise<AcceptContract200Response> {
            return localVarFp.acceptContract(requestParameters.contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deliver cargo to a contract.  In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.  Cargo that was delivered will be removed from the ship\'s cargo.
         * @summary Deliver Cargo to Contract
         * @param {ContractsApiDeliverContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliverContract(requestParameters: ContractsApiDeliverContractRequest, options?: AxiosRequestConfig): AxiosPromise<DeliverContract200Response> {
            return localVarFp.deliverContract(requestParameters.contractId, requestParameters.deliverContractRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
         * @summary Fulfill Contract
         * @param {ContractsApiFulfillContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fulfillContract(requestParameters: ContractsApiFulfillContractRequest, options?: AxiosRequestConfig): AxiosPromise<FulfillContract200Response> {
            return localVarFp.fulfillContract(requestParameters.contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a contract by ID.
         * @summary Get Contract
         * @param {ContractsApiGetContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContract(requestParameters: ContractsApiGetContractRequest, options?: AxiosRequestConfig): AxiosPromise<GetContract200Response> {
            return localVarFp.getContract(requestParameters.contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a paginated list of all your contracts.
         * @summary List Contracts
         * @param {ContractsApiGetContractsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts(requestParameters: ContractsApiGetContractsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetContracts200Response> {
            return localVarFp.getContracts(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptContract operation in ContractsApi.
 * @export
 * @interface ContractsApiAcceptContractRequest
 */
export interface ContractsApiAcceptContractRequest {
    /**
     * The contract ID to accept.
     * @type {any}
     * @memberof ContractsApiAcceptContract
     */
    readonly contractId: any
}

/**
 * Request parameters for deliverContract operation in ContractsApi.
 * @export
 * @interface ContractsApiDeliverContractRequest
 */
export interface ContractsApiDeliverContractRequest {
    /**
     * The ID of the contract.
     * @type {any}
     * @memberof ContractsApiDeliverContract
     */
    readonly contractId: any

    /**
     * 
     * @type {DeliverContractRequest}
     * @memberof ContractsApiDeliverContract
     */
    readonly deliverContractRequest?: DeliverContractRequest
}

/**
 * Request parameters for fulfillContract operation in ContractsApi.
 * @export
 * @interface ContractsApiFulfillContractRequest
 */
export interface ContractsApiFulfillContractRequest {
    /**
     * The ID of the contract to fulfill.
     * @type {any}
     * @memberof ContractsApiFulfillContract
     */
    readonly contractId: any
}

/**
 * Request parameters for getContract operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractRequest
 */
export interface ContractsApiGetContractRequest {
    /**
     * The contract ID
     * @type {any}
     * @memberof ContractsApiGetContract
     */
    readonly contractId: any
}

/**
 * Request parameters for getContracts operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractsRequest
 */
export interface ContractsApiGetContractsRequest {
    /**
     * What entry offset to request
     * @type {any}
     * @memberof ContractsApiGetContracts
     */
    readonly page?: any

    /**
     * How many entries to return per page
     * @type {any}
     * @memberof ContractsApiGetContracts
     */
    readonly limit?: any
}

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
    /**
     * Accept a contract by ID.   You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
     * @summary Accept Contract
     * @param {ContractsApiAcceptContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public acceptContract(requestParameters: ContractsApiAcceptContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).acceptContract(requestParameters.contractId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deliver cargo to a contract.  In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.  Cargo that was delivered will be removed from the ship\'s cargo.
     * @summary Deliver Cargo to Contract
     * @param {ContractsApiDeliverContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public deliverContract(requestParameters: ContractsApiDeliverContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).deliverContract(requestParameters.contractId, requestParameters.deliverContractRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
     * @summary Fulfill Contract
     * @param {ContractsApiFulfillContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public fulfillContract(requestParameters: ContractsApiFulfillContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).fulfillContract(requestParameters.contractId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a contract by ID.
     * @summary Get Contract
     * @param {ContractsApiGetContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getContract(requestParameters: ContractsApiGetContractRequest, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).getContract(requestParameters.contractId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a paginated list of all your contracts.
     * @summary List Contracts
     * @param {ContractsApiGetContractsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getContracts(requestParameters: ContractsApiGetContractsRequest = {}, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).getContracts(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
