/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateChart201Response } from '../models';
// @ts-ignore
import { CreateShipShipScan201Response } from '../models';
// @ts-ignore
import { CreateShipSystemScan201Response } from '../models';
// @ts-ignore
import { CreateShipWaypointScan201Response } from '../models';
// @ts-ignore
import { CreateSurvey201Response } from '../models';
// @ts-ignore
import { DockShip200Response } from '../models';
// @ts-ignore
import { ExtractResources201Response } from '../models';
// @ts-ignore
import { ExtractResourcesRequest } from '../models';
// @ts-ignore
import { GetMounts200Response } from '../models';
// @ts-ignore
import { GetMyShip200Response } from '../models';
// @ts-ignore
import { GetMyShipCargo200Response } from '../models';
// @ts-ignore
import { GetMyShips200Response } from '../models';
// @ts-ignore
import { GetShipCooldown200Response } from '../models';
// @ts-ignore
import { GetShipNav200Response } from '../models';
// @ts-ignore
import { InstallMount201Response } from '../models';
// @ts-ignore
import { InstallMountRequest } from '../models';
// @ts-ignore
import { Jettison200Response } from '../models';
// @ts-ignore
import { JettisonRequest } from '../models';
// @ts-ignore
import { JumpShip200Response } from '../models';
// @ts-ignore
import { JumpShipRequest } from '../models';
// @ts-ignore
import { NavigateShip200Response } from '../models';
// @ts-ignore
import { NavigateShipRequest } from '../models';
// @ts-ignore
import { NegotiateContract200Response } from '../models';
// @ts-ignore
import { OrbitShip200Response } from '../models';
// @ts-ignore
import { PatchShipNavRequest } from '../models';
// @ts-ignore
import { PurchaseCargo201Response } from '../models';
// @ts-ignore
import { PurchaseCargoRequest } from '../models';
// @ts-ignore
import { PurchaseShip201Response } from '../models';
// @ts-ignore
import { PurchaseShipRequest } from '../models';
// @ts-ignore
import { RefuelShip200Response } from '../models';
// @ts-ignore
import { RemoveMount201Response } from '../models';
// @ts-ignore
import { RemoveMountRequest } from '../models';
// @ts-ignore
import { SellCargo201Response } from '../models';
// @ts-ignore
import { SellCargoRequest } from '../models';
// @ts-ignore
import { ShipRefine200Response } from '../models';
// @ts-ignore
import { ShipRefineRequest } from '../models';
// @ts-ignore
import { TransferCargo200Response } from '../models';
// @ts-ignore
import { TransferCargoRequest } from '../models';
/**
 * FleetApi - axios parameter creator
 * @export
 */
export const FleetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
         * @summary Create Chart
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChart: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('createChart', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/chart`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activate your ship\'s sensor arrays to scan for ship information.
         * @summary Scan Ships
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipShipScan: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('createShipShipScan', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/scan/ships`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activate your ship\'s sensor arrays to scan for system information.
         * @summary Scan Systems
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipSystemScan: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('createShipSystemScan', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/scan/systems`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activate your ship\'s sensor arrays to scan for waypoint information.
         * @summary Scan Waypoints
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipWaypointScan: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('createShipWaypointScan', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/scan/waypoints`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
         * @summary Create Survey
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurvey: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('createSurvey', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/survey`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
         * @summary Dock Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dockShip: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('dockShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/dock`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
         * @summary Extract Resources
         * @param {string} shipSymbol The ship symbol
         * @param {ExtractResourcesRequest} [extractResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractResources: async (shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('extractResources', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/extract`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(extractResourcesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the mounts on a ship.
         * @summary Get Mounts
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMounts: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('getMounts', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/mounts`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of your ship.
         * @summary Get Ship
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShip: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('getMyShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the cargo of your ship.
         * @summary Get Ship Cargo
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShipCargo: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('getMyShipCargo', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/cargo`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all of your ships.
         * @summary List Ships
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShips: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my/ships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
         * @summary Get Ship Cooldown
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipCooldown: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('getShipCooldown', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/cooldown`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current nav status of a ship.
         * @summary Get Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipNav: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('getShipNav', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/nav`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Install a mount on a ship.
         * @summary Install Mount
         * @param {string} shipSymbol 
         * @param {InstallMountRequest} [installMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installMount: async (shipSymbol: string, installMountRequest?: InstallMountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('installMount', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/mounts/install`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(installMountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Jettison cargo from your ship\'s cargo hold.
         * @summary Jettison Cargo
         * @param {string} shipSymbol 
         * @param {JettisonRequest} [jettisonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jettison: async (shipSymbol: string, jettisonRequest?: JettisonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('jettison', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/jettison`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jettisonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
         * @summary Jump Ship
         * @param {string} shipSymbol 
         * @param {JumpShipRequest} [jumpShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jumpShip: async (shipSymbol: string, jumpShipRequest?: JumpShipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('jumpShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/jump`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jumpShipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
         * @summary Navigate Ship
         * @param {string} shipSymbol The ship symbol
         * @param {NavigateShipRequest} [navigateShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navigateShip: async (shipSymbol: string, navigateShipRequest?: NavigateShipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('navigateShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/navigate`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(navigateShipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Negotiate Contract
         * @param {string} shipSymbol 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiateContract: async (shipSymbol: string, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('negotiateContract', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/negotiate/contract`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
         * @summary Orbit Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orbitShip: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('orbitShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/orbit`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the nav data of a ship, such as the flight mode.
         * @summary Patch Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {PatchShipNavRequest} [patchShipNavRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipNav: async (shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('patchShipNav', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/nav`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchShipNavRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchase cargo.
         * @summary Purchase Cargo
         * @param {string} shipSymbol 
         * @param {PurchaseCargoRequest} [purchaseCargoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseCargo: async (shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('purchaseCargo', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/purchase`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseCargoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchase a ship
         * @summary Purchase Ship
         * @param {PurchaseShipRequest} [purchaseShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShip: async (purchaseShipRequest?: PurchaseShipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my/ships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseShipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refuel your ship from the local market.
         * @summary Refuel Ship
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refuelShip: async (shipSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('refuelShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/refuel`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a mount from a ship.
         * @summary Remove Mount
         * @param {string} shipSymbol 
         * @param {RemoveMountRequest} [removeMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMount: async (shipSymbol: string, removeMountRequest?: RemoveMountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('removeMount', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/mounts/remove`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeMountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sell cargo.
         * @summary Sell Cargo
         * @param {string} shipSymbol 
         * @param {SellCargoRequest} [sellCargoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellCargo: async (shipSymbol: string, sellCargoRequest?: SellCargoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('sellCargo', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/sell`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sellCargoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
         * @summary Ship Refine
         * @param {string} shipSymbol The symbol of the ship
         * @param {ShipRefineRequest} [shipRefineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipRefine: async (shipSymbol: string, shipRefineRequest?: ShipRefineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('shipRefine', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/refine`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shipRefineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer cargo between ships.
         * @summary Transfer Cargo
         * @param {string} shipSymbol 
         * @param {TransferCargoRequest} [transferCargoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCargo: async (shipSymbol: string, transferCargoRequest?: TransferCargoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('transferCargo', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/transfer`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCargoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
         * @summary Warp Ship
         * @param {string} shipSymbol 
         * @param {NavigateShipRequest} [navigateShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warpShip: async (shipSymbol: string, navigateShipRequest?: NavigateShipRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipSymbol' is not null or undefined
            assertParamExists('warpShip', 'shipSymbol', shipSymbol)
            const localVarPath = `/my/ships/{shipSymbol}/warp`
                .replace(`{${"shipSymbol"}}`, encodeURIComponent(String(shipSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(navigateShipRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FleetApi - functional programming interface
 * @export
 */
export const FleetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FleetApiAxiosParamCreator(configuration)
    return {
        /**
         * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
         * @summary Create Chart
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChart(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateChart201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChart(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Activate your ship\'s sensor arrays to scan for ship information.
         * @summary Scan Ships
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipShipScan(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipShipScan201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipShipScan(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Activate your ship\'s sensor arrays to scan for system information.
         * @summary Scan Systems
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipSystemScan(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipSystemScan201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipSystemScan(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Activate your ship\'s sensor arrays to scan for waypoint information.
         * @summary Scan Waypoints
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipWaypointScan(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipWaypointScan201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipWaypointScan(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
         * @summary Create Survey
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSurvey(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSurvey201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSurvey(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
         * @summary Dock Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dockShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dockShip(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
         * @summary Extract Resources
         * @param {string} shipSymbol The ship symbol
         * @param {ExtractResourcesRequest} [extractResourcesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractResources(shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtractResources201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.extractResources(shipSymbol, extractResourcesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the mounts on a ship.
         * @summary Get Mounts
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMounts(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMounts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMounts(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the details of your ship.
         * @summary Get Ship
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyShip(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the cargo of your ship.
         * @summary Get Ship Cargo
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyShipCargo(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyShipCargo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyShipCargo(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all of your ships.
         * @summary List Ships
         * @param {number} [page] What entry offset to request
         * @param {number} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyShips(page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyShips200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyShips(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
         * @summary Get Ship Cooldown
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipCooldown(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipCooldown200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipCooldown(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current nav status of a ship.
         * @summary Get Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipNav(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipNav200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipNav(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Install a mount on a ship.
         * @summary Install Mount
         * @param {string} shipSymbol 
         * @param {InstallMountRequest} [installMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installMount(shipSymbol: string, installMountRequest?: InstallMountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallMount201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.installMount(shipSymbol, installMountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Jettison cargo from your ship\'s cargo hold.
         * @summary Jettison Cargo
         * @param {string} shipSymbol 
         * @param {JettisonRequest} [jettisonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jettison(shipSymbol: string, jettisonRequest?: JettisonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Jettison200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jettison(shipSymbol, jettisonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
         * @summary Jump Ship
         * @param {string} shipSymbol 
         * @param {JumpShipRequest} [jumpShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jumpShip(shipSymbol: string, jumpShipRequest?: JumpShipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JumpShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jumpShip(shipSymbol, jumpShipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
         * @summary Navigate Ship
         * @param {string} shipSymbol The ship symbol
         * @param {NavigateShipRequest} [navigateShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async navigateShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NavigateShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.navigateShip(shipSymbol, navigateShipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Negotiate Contract
         * @param {string} shipSymbol 
         * @param {any} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async negotiateContract(shipSymbol: string, body?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegotiateContract200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.negotiateContract(shipSymbol, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
         * @summary Orbit Ship
         * @param {string} shipSymbol The symbol of the ship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orbitShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrbitShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orbitShip(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the nav data of a ship, such as the flight mode.
         * @summary Patch Ship Nav
         * @param {string} shipSymbol The ship symbol
         * @param {PatchShipNavRequest} [patchShipNavRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchShipNav(shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipNav200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchShipNav(shipSymbol, patchShipNavRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchase cargo.
         * @summary Purchase Cargo
         * @param {string} shipSymbol 
         * @param {PurchaseCargoRequest} [purchaseCargoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseCargo(shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseCargo201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseCargo(shipSymbol, purchaseCargoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchase a ship
         * @summary Purchase Ship
         * @param {PurchaseShipRequest} [purchaseShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseShip(purchaseShipRequest?: PurchaseShipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseShip201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseShip(purchaseShipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refuel your ship from the local market.
         * @summary Refuel Ship
         * @param {string} shipSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refuelShip(shipSymbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefuelShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refuelShip(shipSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a mount from a ship.
         * @summary Remove Mount
         * @param {string} shipSymbol 
         * @param {RemoveMountRequest} [removeMountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMount(shipSymbol: string, removeMountRequest?: RemoveMountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveMount201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMount(shipSymbol, removeMountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sell cargo.
         * @summary Sell Cargo
         * @param {string} shipSymbol 
         * @param {SellCargoRequest} [sellCargoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellCargo(shipSymbol: string, sellCargoRequest?: SellCargoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellCargo201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellCargo(shipSymbol, sellCargoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
         * @summary Ship Refine
         * @param {string} shipSymbol The symbol of the ship
         * @param {ShipRefineRequest} [shipRefineRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipRefine(shipSymbol: string, shipRefineRequest?: ShipRefineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipRefine200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipRefine(shipSymbol, shipRefineRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Transfer cargo between ships.
         * @summary Transfer Cargo
         * @param {string} shipSymbol 
         * @param {TransferCargoRequest} [transferCargoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferCargo(shipSymbol: string, transferCargoRequest?: TransferCargoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCargo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferCargo(shipSymbol, transferCargoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
         * @summary Warp Ship
         * @param {string} shipSymbol 
         * @param {NavigateShipRequest} [navigateShipRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async warpShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NavigateShip200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.warpShip(shipSymbol, navigateShipRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FleetApi - factory interface
 * @export
 */
export const FleetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FleetApiFp(configuration)
    return {
        /**
         * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
         * @summary Create Chart
         * @param {FleetApiCreateChartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChart(requestParameters: FleetApiCreateChartRequest, options?: AxiosRequestConfig): AxiosPromise<CreateChart201Response> {
            return localVarFp.createChart(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate your ship\'s sensor arrays to scan for ship information.
         * @summary Scan Ships
         * @param {FleetApiCreateShipShipScanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipShipScan(requestParameters: FleetApiCreateShipShipScanRequest, options?: AxiosRequestConfig): AxiosPromise<CreateShipShipScan201Response> {
            return localVarFp.createShipShipScan(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate your ship\'s sensor arrays to scan for system information.
         * @summary Scan Systems
         * @param {FleetApiCreateShipSystemScanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipSystemScan(requestParameters: FleetApiCreateShipSystemScanRequest, options?: AxiosRequestConfig): AxiosPromise<CreateShipSystemScan201Response> {
            return localVarFp.createShipSystemScan(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate your ship\'s sensor arrays to scan for waypoint information.
         * @summary Scan Waypoints
         * @param {FleetApiCreateShipWaypointScanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipWaypointScan(requestParameters: FleetApiCreateShipWaypointScanRequest, options?: AxiosRequestConfig): AxiosPromise<CreateShipWaypointScan201Response> {
            return localVarFp.createShipWaypointScan(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
         * @summary Create Survey
         * @param {FleetApiCreateSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurvey(requestParameters: FleetApiCreateSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<CreateSurvey201Response> {
            return localVarFp.createSurvey(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
         * @summary Dock Ship
         * @param {FleetApiDockShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dockShip(requestParameters: FleetApiDockShipRequest, options?: AxiosRequestConfig): AxiosPromise<DockShip200Response> {
            return localVarFp.dockShip(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
         * @summary Extract Resources
         * @param {FleetApiExtractResourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractResources(requestParameters: FleetApiExtractResourcesRequest, options?: AxiosRequestConfig): AxiosPromise<ExtractResources201Response> {
            return localVarFp.extractResources(requestParameters.shipSymbol, requestParameters.extractResourcesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the mounts on a ship.
         * @summary Get Mounts
         * @param {FleetApiGetMountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMounts(requestParameters: FleetApiGetMountsRequest, options?: AxiosRequestConfig): AxiosPromise<GetMounts200Response> {
            return localVarFp.getMounts(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of your ship.
         * @summary Get Ship
         * @param {FleetApiGetMyShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShip(requestParameters: FleetApiGetMyShipRequest, options?: AxiosRequestConfig): AxiosPromise<GetMyShip200Response> {
            return localVarFp.getMyShip(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the cargo of your ship.
         * @summary Get Ship Cargo
         * @param {FleetApiGetMyShipCargoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShipCargo(requestParameters: FleetApiGetMyShipCargoRequest, options?: AxiosRequestConfig): AxiosPromise<GetMyShipCargo200Response> {
            return localVarFp.getMyShipCargo(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all of your ships.
         * @summary List Ships
         * @param {FleetApiGetMyShipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyShips(requestParameters: FleetApiGetMyShipsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetMyShips200Response> {
            return localVarFp.getMyShips(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
         * @summary Get Ship Cooldown
         * @param {FleetApiGetShipCooldownRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipCooldown(requestParameters: FleetApiGetShipCooldownRequest, options?: AxiosRequestConfig): AxiosPromise<GetShipCooldown200Response> {
            return localVarFp.getShipCooldown(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current nav status of a ship.
         * @summary Get Ship Nav
         * @param {FleetApiGetShipNavRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipNav(requestParameters: FleetApiGetShipNavRequest, options?: AxiosRequestConfig): AxiosPromise<GetShipNav200Response> {
            return localVarFp.getShipNav(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Install a mount on a ship.
         * @summary Install Mount
         * @param {FleetApiInstallMountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installMount(requestParameters: FleetApiInstallMountRequest, options?: AxiosRequestConfig): AxiosPromise<InstallMount201Response> {
            return localVarFp.installMount(requestParameters.shipSymbol, requestParameters.installMountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Jettison cargo from your ship\'s cargo hold.
         * @summary Jettison Cargo
         * @param {FleetApiJettisonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jettison(requestParameters: FleetApiJettisonRequest, options?: AxiosRequestConfig): AxiosPromise<Jettison200Response> {
            return localVarFp.jettison(requestParameters.shipSymbol, requestParameters.jettisonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
         * @summary Jump Ship
         * @param {FleetApiJumpShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jumpShip(requestParameters: FleetApiJumpShipRequest, options?: AxiosRequestConfig): AxiosPromise<JumpShip200Response> {
            return localVarFp.jumpShip(requestParameters.shipSymbol, requestParameters.jumpShipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
         * @summary Navigate Ship
         * @param {FleetApiNavigateShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        navigateShip(requestParameters: FleetApiNavigateShipRequest, options?: AxiosRequestConfig): AxiosPromise<NavigateShip200Response> {
            return localVarFp.navigateShip(requestParameters.shipSymbol, requestParameters.navigateShipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Negotiate Contract
         * @param {FleetApiNegotiateContractRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        negotiateContract(requestParameters: FleetApiNegotiateContractRequest, options?: AxiosRequestConfig): AxiosPromise<NegotiateContract200Response> {
            return localVarFp.negotiateContract(requestParameters.shipSymbol, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
         * @summary Orbit Ship
         * @param {FleetApiOrbitShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orbitShip(requestParameters: FleetApiOrbitShipRequest, options?: AxiosRequestConfig): AxiosPromise<OrbitShip200Response> {
            return localVarFp.orbitShip(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the nav data of a ship, such as the flight mode.
         * @summary Patch Ship Nav
         * @param {FleetApiPatchShipNavRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchShipNav(requestParameters: FleetApiPatchShipNavRequest, options?: AxiosRequestConfig): AxiosPromise<GetShipNav200Response> {
            return localVarFp.patchShipNav(requestParameters.shipSymbol, requestParameters.patchShipNavRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchase cargo.
         * @summary Purchase Cargo
         * @param {FleetApiPurchaseCargoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseCargo(requestParameters: FleetApiPurchaseCargoRequest, options?: AxiosRequestConfig): AxiosPromise<PurchaseCargo201Response> {
            return localVarFp.purchaseCargo(requestParameters.shipSymbol, requestParameters.purchaseCargoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchase a ship
         * @summary Purchase Ship
         * @param {FleetApiPurchaseShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShip(requestParameters: FleetApiPurchaseShipRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PurchaseShip201Response> {
            return localVarFp.purchaseShip(requestParameters.purchaseShipRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Refuel your ship from the local market.
         * @summary Refuel Ship
         * @param {FleetApiRefuelShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refuelShip(requestParameters: FleetApiRefuelShipRequest, options?: AxiosRequestConfig): AxiosPromise<RefuelShip200Response> {
            return localVarFp.refuelShip(requestParameters.shipSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a mount from a ship.
         * @summary Remove Mount
         * @param {FleetApiRemoveMountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMount(requestParameters: FleetApiRemoveMountRequest, options?: AxiosRequestConfig): AxiosPromise<RemoveMount201Response> {
            return localVarFp.removeMount(requestParameters.shipSymbol, requestParameters.removeMountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sell cargo.
         * @summary Sell Cargo
         * @param {FleetApiSellCargoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellCargo(requestParameters: FleetApiSellCargoRequest, options?: AxiosRequestConfig): AxiosPromise<SellCargo201Response> {
            return localVarFp.sellCargo(requestParameters.shipSymbol, requestParameters.sellCargoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
         * @summary Ship Refine
         * @param {FleetApiShipRefineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipRefine(requestParameters: FleetApiShipRefineRequest, options?: AxiosRequestConfig): AxiosPromise<ShipRefine200Response> {
            return localVarFp.shipRefine(requestParameters.shipSymbol, requestParameters.shipRefineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer cargo between ships.
         * @summary Transfer Cargo
         * @param {FleetApiTransferCargoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCargo(requestParameters: FleetApiTransferCargoRequest, options?: AxiosRequestConfig): AxiosPromise<TransferCargo200Response> {
            return localVarFp.transferCargo(requestParameters.shipSymbol, requestParameters.transferCargoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
         * @summary Warp Ship
         * @param {FleetApiWarpShipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        warpShip(requestParameters: FleetApiWarpShipRequest, options?: AxiosRequestConfig): AxiosPromise<NavigateShip200Response> {
            return localVarFp.warpShip(requestParameters.shipSymbol, requestParameters.navigateShipRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createChart operation in FleetApi.
 * @export
 * @interface FleetApiCreateChartRequest
 */
export interface FleetApiCreateChartRequest {
    /**
     * The symbol of the ship
     * @type {string}
     * @memberof FleetApiCreateChart
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for createShipShipScan operation in FleetApi.
 * @export
 * @interface FleetApiCreateShipShipScanRequest
 */
export interface FleetApiCreateShipShipScanRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiCreateShipShipScan
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for createShipSystemScan operation in FleetApi.
 * @export
 * @interface FleetApiCreateShipSystemScanRequest
 */
export interface FleetApiCreateShipSystemScanRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiCreateShipSystemScan
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for createShipWaypointScan operation in FleetApi.
 * @export
 * @interface FleetApiCreateShipWaypointScanRequest
 */
export interface FleetApiCreateShipWaypointScanRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiCreateShipWaypointScan
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for createSurvey operation in FleetApi.
 * @export
 * @interface FleetApiCreateSurveyRequest
 */
export interface FleetApiCreateSurveyRequest {
    /**
     * The symbol of the ship
     * @type {string}
     * @memberof FleetApiCreateSurvey
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for dockShip operation in FleetApi.
 * @export
 * @interface FleetApiDockShipRequest
 */
export interface FleetApiDockShipRequest {
    /**
     * The symbol of the ship
     * @type {string}
     * @memberof FleetApiDockShip
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for extractResources operation in FleetApi.
 * @export
 * @interface FleetApiExtractResourcesRequest
 */
export interface FleetApiExtractResourcesRequest {
    /**
     * The ship symbol
     * @type {string}
     * @memberof FleetApiExtractResources
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {ExtractResourcesRequest}
     * @memberof FleetApiExtractResources
     */
    readonly extractResourcesRequest?: ExtractResourcesRequest
}

/**
 * Request parameters for getMounts operation in FleetApi.
 * @export
 * @interface FleetApiGetMountsRequest
 */
export interface FleetApiGetMountsRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiGetMounts
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for getMyShip operation in FleetApi.
 * @export
 * @interface FleetApiGetMyShipRequest
 */
export interface FleetApiGetMyShipRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiGetMyShip
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for getMyShipCargo operation in FleetApi.
 * @export
 * @interface FleetApiGetMyShipCargoRequest
 */
export interface FleetApiGetMyShipCargoRequest {
    /**
     * The symbol of the ship
     * @type {string}
     * @memberof FleetApiGetMyShipCargo
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for getMyShips operation in FleetApi.
 * @export
 * @interface FleetApiGetMyShipsRequest
 */
export interface FleetApiGetMyShipsRequest {
    /**
     * What entry offset to request
     * @type {number}
     * @memberof FleetApiGetMyShips
     */
    readonly page?: number

    /**
     * How many entries to return per page
     * @type {number}
     * @memberof FleetApiGetMyShips
     */
    readonly limit?: number
}

/**
 * Request parameters for getShipCooldown operation in FleetApi.
 * @export
 * @interface FleetApiGetShipCooldownRequest
 */
export interface FleetApiGetShipCooldownRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiGetShipCooldown
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for getShipNav operation in FleetApi.
 * @export
 * @interface FleetApiGetShipNavRequest
 */
export interface FleetApiGetShipNavRequest {
    /**
     * The ship symbol
     * @type {string}
     * @memberof FleetApiGetShipNav
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for installMount operation in FleetApi.
 * @export
 * @interface FleetApiInstallMountRequest
 */
export interface FleetApiInstallMountRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiInstallMount
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {InstallMountRequest}
     * @memberof FleetApiInstallMount
     */
    readonly installMountRequest?: InstallMountRequest
}

/**
 * Request parameters for jettison operation in FleetApi.
 * @export
 * @interface FleetApiJettisonRequest
 */
export interface FleetApiJettisonRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiJettison
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {JettisonRequest}
     * @memberof FleetApiJettison
     */
    readonly jettisonRequest?: JettisonRequest
}

/**
 * Request parameters for jumpShip operation in FleetApi.
 * @export
 * @interface FleetApiJumpShipRequest
 */
export interface FleetApiJumpShipRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiJumpShip
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {JumpShipRequest}
     * @memberof FleetApiJumpShip
     */
    readonly jumpShipRequest?: JumpShipRequest
}

/**
 * Request parameters for navigateShip operation in FleetApi.
 * @export
 * @interface FleetApiNavigateShipRequest
 */
export interface FleetApiNavigateShipRequest {
    /**
     * The ship symbol
     * @type {string}
     * @memberof FleetApiNavigateShip
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {NavigateShipRequest}
     * @memberof FleetApiNavigateShip
     */
    readonly navigateShipRequest?: NavigateShipRequest
}

/**
 * Request parameters for negotiateContract operation in FleetApi.
 * @export
 * @interface FleetApiNegotiateContractRequest
 */
export interface FleetApiNegotiateContractRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiNegotiateContract
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {any}
     * @memberof FleetApiNegotiateContract
     */
    readonly body?: any
}

/**
 * Request parameters for orbitShip operation in FleetApi.
 * @export
 * @interface FleetApiOrbitShipRequest
 */
export interface FleetApiOrbitShipRequest {
    /**
     * The symbol of the ship
     * @type {string}
     * @memberof FleetApiOrbitShip
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for patchShipNav operation in FleetApi.
 * @export
 * @interface FleetApiPatchShipNavRequest
 */
export interface FleetApiPatchShipNavRequest {
    /**
     * The ship symbol
     * @type {string}
     * @memberof FleetApiPatchShipNav
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {PatchShipNavRequest}
     * @memberof FleetApiPatchShipNav
     */
    readonly patchShipNavRequest?: PatchShipNavRequest
}

/**
 * Request parameters for purchaseCargo operation in FleetApi.
 * @export
 * @interface FleetApiPurchaseCargoRequest
 */
export interface FleetApiPurchaseCargoRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiPurchaseCargo
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {PurchaseCargoRequest}
     * @memberof FleetApiPurchaseCargo
     */
    readonly purchaseCargoRequest?: PurchaseCargoRequest
}

/**
 * Request parameters for purchaseShip operation in FleetApi.
 * @export
 * @interface FleetApiPurchaseShipRequest
 */
export interface FleetApiPurchaseShipRequest {
    /**
     * 
     * @type {PurchaseShipRequest}
     * @memberof FleetApiPurchaseShip
     */
    readonly purchaseShipRequest?: PurchaseShipRequest
}

/**
 * Request parameters for refuelShip operation in FleetApi.
 * @export
 * @interface FleetApiRefuelShipRequest
 */
export interface FleetApiRefuelShipRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiRefuelShip
     */
    readonly shipSymbol: string
}

/**
 * Request parameters for removeMount operation in FleetApi.
 * @export
 * @interface FleetApiRemoveMountRequest
 */
export interface FleetApiRemoveMountRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiRemoveMount
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {RemoveMountRequest}
     * @memberof FleetApiRemoveMount
     */
    readonly removeMountRequest?: RemoveMountRequest
}

/**
 * Request parameters for sellCargo operation in FleetApi.
 * @export
 * @interface FleetApiSellCargoRequest
 */
export interface FleetApiSellCargoRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiSellCargo
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {SellCargoRequest}
     * @memberof FleetApiSellCargo
     */
    readonly sellCargoRequest?: SellCargoRequest
}

/**
 * Request parameters for shipRefine operation in FleetApi.
 * @export
 * @interface FleetApiShipRefineRequest
 */
export interface FleetApiShipRefineRequest {
    /**
     * The symbol of the ship
     * @type {string}
     * @memberof FleetApiShipRefine
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {ShipRefineRequest}
     * @memberof FleetApiShipRefine
     */
    readonly shipRefineRequest?: ShipRefineRequest
}

/**
 * Request parameters for transferCargo operation in FleetApi.
 * @export
 * @interface FleetApiTransferCargoRequest
 */
export interface FleetApiTransferCargoRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiTransferCargo
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {TransferCargoRequest}
     * @memberof FleetApiTransferCargo
     */
    readonly transferCargoRequest?: TransferCargoRequest
}

/**
 * Request parameters for warpShip operation in FleetApi.
 * @export
 * @interface FleetApiWarpShipRequest
 */
export interface FleetApiWarpShipRequest {
    /**
     * 
     * @type {string}
     * @memberof FleetApiWarpShip
     */
    readonly shipSymbol: string

    /**
     * 
     * @type {NavigateShipRequest}
     * @memberof FleetApiWarpShip
     */
    readonly navigateShipRequest?: NavigateShipRequest
}

/**
 * FleetApi - object-oriented interface
 * @export
 * @class FleetApi
 * @extends {BaseAPI}
 */
export class FleetApi extends BaseAPI {
    /**
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     * @summary Create Chart
     * @param {FleetApiCreateChartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public createChart(requestParameters: FleetApiCreateChartRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).createChart(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Activate your ship\'s sensor arrays to scan for ship information.
     * @summary Scan Ships
     * @param {FleetApiCreateShipShipScanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public createShipShipScan(requestParameters: FleetApiCreateShipShipScanRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).createShipShipScan(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Activate your ship\'s sensor arrays to scan for system information.
     * @summary Scan Systems
     * @param {FleetApiCreateShipSystemScanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public createShipSystemScan(requestParameters: FleetApiCreateShipSystemScanRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).createShipSystemScan(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Activate your ship\'s sensor arrays to scan for waypoint information.
     * @summary Scan Waypoints
     * @param {FleetApiCreateShipWaypointScanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public createShipWaypointScan(requestParameters: FleetApiCreateShipWaypointScanRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).createShipWaypointScan(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @summary Create Survey
     * @param {FleetApiCreateSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public createSurvey(requestParameters: FleetApiCreateSurveyRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).createSurvey(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attempt to dock your ship at it\'s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @summary Dock Ship
     * @param {FleetApiDockShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public dockShip(requestParameters: FleetApiDockShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).dockShip(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @summary Extract Resources
     * @param {FleetApiExtractResourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public extractResources(requestParameters: FleetApiExtractResourcesRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).extractResources(requestParameters.shipSymbol, requestParameters.extractResourcesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the mounts on a ship.
     * @summary Get Mounts
     * @param {FleetApiGetMountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public getMounts(requestParameters: FleetApiGetMountsRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).getMounts(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of your ship.
     * @summary Get Ship
     * @param {FleetApiGetMyShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public getMyShip(requestParameters: FleetApiGetMyShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).getMyShip(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the cargo of your ship.
     * @summary Get Ship Cargo
     * @param {FleetApiGetMyShipCargoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public getMyShipCargo(requestParameters: FleetApiGetMyShipCargoRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).getMyShipCargo(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all of your ships.
     * @summary List Ships
     * @param {FleetApiGetMyShipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public getMyShips(requestParameters: FleetApiGetMyShipsRequest = {}, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).getMyShips(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @summary Get Ship Cooldown
     * @param {FleetApiGetShipCooldownRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public getShipCooldown(requestParameters: FleetApiGetShipCooldownRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).getShipCooldown(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current nav status of a ship.
     * @summary Get Ship Nav
     * @param {FleetApiGetShipNavRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public getShipNav(requestParameters: FleetApiGetShipNavRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).getShipNav(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Install a mount on a ship.
     * @summary Install Mount
     * @param {FleetApiInstallMountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public installMount(requestParameters: FleetApiInstallMountRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).installMount(requestParameters.shipSymbol, requestParameters.installMountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Jettison cargo from your ship\'s cargo hold.
     * @summary Jettison Cargo
     * @param {FleetApiJettisonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public jettison(requestParameters: FleetApiJettisonRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).jettison(requestParameters.shipSymbol, requestParameters.jettisonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
     * @summary Jump Ship
     * @param {FleetApiJumpShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public jumpShip(requestParameters: FleetApiJumpShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).jumpShip(requestParameters.shipSymbol, requestParameters.jumpShipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s warp or jump actions.
     * @summary Navigate Ship
     * @param {FleetApiNavigateShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public navigateShip(requestParameters: FleetApiNavigateShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).navigateShip(requestParameters.shipSymbol, requestParameters.navigateShipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Negotiate Contract
     * @param {FleetApiNegotiateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public negotiateContract(requestParameters: FleetApiNegotiateContractRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).negotiateContract(requestParameters.shipSymbol, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attempt to move your ship into orbit at it\'s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @summary Orbit Ship
     * @param {FleetApiOrbitShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public orbitShip(requestParameters: FleetApiOrbitShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).orbitShip(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the nav data of a ship, such as the flight mode.
     * @summary Patch Ship Nav
     * @param {FleetApiPatchShipNavRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public patchShipNav(requestParameters: FleetApiPatchShipNavRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).patchShipNav(requestParameters.shipSymbol, requestParameters.patchShipNavRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchase cargo.
     * @summary Purchase Cargo
     * @param {FleetApiPurchaseCargoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public purchaseCargo(requestParameters: FleetApiPurchaseCargoRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).purchaseCargo(requestParameters.shipSymbol, requestParameters.purchaseCargoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchase a ship
     * @summary Purchase Ship
     * @param {FleetApiPurchaseShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public purchaseShip(requestParameters: FleetApiPurchaseShipRequest = {}, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).purchaseShip(requestParameters.purchaseShipRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refuel your ship from the local market.
     * @summary Refuel Ship
     * @param {FleetApiRefuelShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public refuelShip(requestParameters: FleetApiRefuelShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).refuelShip(requestParameters.shipSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a mount from a ship.
     * @summary Remove Mount
     * @param {FleetApiRemoveMountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public removeMount(requestParameters: FleetApiRemoveMountRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).removeMount(requestParameters.shipSymbol, requestParameters.removeMountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sell cargo.
     * @summary Sell Cargo
     * @param {FleetApiSellCargoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public sellCargo(requestParameters: FleetApiSellCargoRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).sellCargo(requestParameters.shipSymbol, requestParameters.sellCargoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @summary Ship Refine
     * @param {FleetApiShipRefineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public shipRefine(requestParameters: FleetApiShipRefineRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).shipRefine(requestParameters.shipSymbol, requestParameters.shipRefineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer cargo between ships.
     * @summary Transfer Cargo
     * @param {FleetApiTransferCargoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public transferCargo(requestParameters: FleetApiTransferCargoRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).transferCargo(requestParameters.shipSymbol, requestParameters.transferCargoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship\'s manifest, and will pay out crew wages from the agent\'s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.
     * @summary Warp Ship
     * @param {FleetApiWarpShipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FleetApi
     */
    public warpShip(requestParameters: FleetApiWarpShipRequest, options?: AxiosRequestConfig) {
        return FleetApiFp(this.configuration).warpShip(requestParameters.shipSymbol, requestParameters.navigateShipRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
