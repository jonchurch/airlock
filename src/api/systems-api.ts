/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetConstruction200Response } from '../models';
// @ts-ignore
import { GetJumpGate200Response } from '../models';
// @ts-ignore
import { GetMarket200Response } from '../models';
// @ts-ignore
import { GetShipyard200Response } from '../models';
// @ts-ignore
import { GetSystem200Response } from '../models';
// @ts-ignore
import { GetSystemWaypoints200Response } from '../models';
// @ts-ignore
import { GetSystems200Response } from '../models';
// @ts-ignore
import { GetWaypoint200Response } from '../models';
// @ts-ignore
import { SupplyConstruction201Response } from '../models';
// @ts-ignore
import { SupplyConstructionRequest } from '../models';
/**
 * SystemsApi - axios parameter creator
 * @export
 */
export const SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
         * @summary Get Construction Site
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstruction: async (systemSymbol: any, waypointSymbol: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getConstruction', 'systemSymbol', systemSymbol)
            // verify required parameter 'waypointSymbol' is not null or undefined
            assertParamExists('getConstruction', 'waypointSymbol', waypointSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)))
                .replace(`{${"waypointSymbol"}}`, encodeURIComponent(String(waypointSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.  Waypoints connected to this jump gate can be 
         * @summary Get Jump Gate
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJumpGate: async (systemSymbol: any, waypointSymbol: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getJumpGate', 'systemSymbol', systemSymbol)
            // verify required parameter 'waypointSymbol' is not null or undefined
            assertParamExists('getJumpGate', 'waypointSymbol', waypointSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)))
                .replace(`{${"waypointSymbol"}}`, encodeURIComponent(String(waypointSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
         * @summary Get Market
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarket: async (systemSymbol: any, waypointSymbol: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getMarket', 'systemSymbol', systemSymbol)
            // verify required parameter 'waypointSymbol' is not null or undefined
            assertParamExists('getMarket', 'waypointSymbol', waypointSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints/{waypointSymbol}/market`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)))
                .replace(`{${"waypointSymbol"}}`, encodeURIComponent(String(waypointSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
         * @summary Get Shipyard
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipyard: async (systemSymbol: any, waypointSymbol: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getShipyard', 'systemSymbol', systemSymbol)
            // verify required parameter 'waypointSymbol' is not null or undefined
            assertParamExists('getShipyard', 'waypointSymbol', waypointSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)))
                .replace(`{${"waypointSymbol"}}`, encodeURIComponent(String(waypointSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a system.
         * @summary Get System
         * @param {any} systemSymbol The system symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: async (systemSymbol: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getSystem', 'systemSymbol', systemSymbol)
            const localVarPath = `/systems/{systemSymbol}`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
         * @summary List Waypoints in System
         * @param {any} systemSymbol The system symbol
         * @param {any} [page] What entry offset to request
         * @param {any} [limit] How many entries to return per page
         * @param {any} [type] Filter waypoints by type.
         * @param {any} [traits] Filter waypoints by one or more traits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWaypoints: async (systemSymbol: any, page?: any, limit?: any, type?: any, traits?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getSystemWaypoints', 'systemSymbol', systemSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (traits !== undefined) {
                localVarQueryParameter['traits'] = traits;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a paginated list of all systems.
         * @summary List Systems
         * @param {any} [page] What entry offset to request
         * @param {any} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: async (page?: any, limit?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View the details of a waypoint.  If the waypoint is uncharted, it will return the \'Uncharted\' trait instead of its actual traits.
         * @summary Get Waypoint
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaypoint: async (systemSymbol: any, waypointSymbol: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('getWaypoint', 'systemSymbol', systemSymbol)
            // verify required parameter 'waypointSymbol' is not null or undefined
            assertParamExists('getWaypoint', 'waypointSymbol', waypointSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints/{waypointSymbol}`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)))
                .replace(`{${"waypointSymbol"}}`, encodeURIComponent(String(waypointSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.  The good must be in your ship\'s cargo. The good will be removed from your ship\'s cargo and added to the construction site\'s materials.
         * @summary Supply Construction Site
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {SupplyConstructionRequest} [supplyConstructionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyConstruction: async (systemSymbol: any, waypointSymbol: any, supplyConstructionRequest?: SupplyConstructionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSymbol' is not null or undefined
            assertParamExists('supplyConstruction', 'systemSymbol', systemSymbol)
            // verify required parameter 'waypointSymbol' is not null or undefined
            assertParamExists('supplyConstruction', 'waypointSymbol', waypointSymbol)
            const localVarPath = `/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply`
                .replace(`{${"systemSymbol"}}`, encodeURIComponent(String(systemSymbol)))
                .replace(`{${"waypointSymbol"}}`, encodeURIComponent(String(waypointSymbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AgentToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplyConstructionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsApi - functional programming interface
 * @export
 */
export const SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
         * @summary Get Construction Site
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConstruction(systemSymbol: any, waypointSymbol: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConstruction200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConstruction(systemSymbol, waypointSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.  Waypoints connected to this jump gate can be 
         * @summary Get Jump Gate
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJumpGate(systemSymbol: any, waypointSymbol: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetJumpGate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJumpGate(systemSymbol, waypointSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
         * @summary Get Market
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarket(systemSymbol: any, waypointSymbol: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMarket200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarket(systemSymbol, waypointSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
         * @summary Get Shipyard
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipyard(systemSymbol: any, waypointSymbol: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipyard200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipyard(systemSymbol, waypointSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of a system.
         * @summary Get System
         * @param {any} systemSymbol The system symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystem(systemSymbol: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystem200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystem(systemSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
         * @summary List Waypoints in System
         * @param {any} systemSymbol The system symbol
         * @param {any} [page] What entry offset to request
         * @param {any} [limit] How many entries to return per page
         * @param {any} [type] Filter waypoints by type.
         * @param {any} [traits] Filter waypoints by one or more traits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemWaypoints(systemSymbol: any, page?: any, limit?: any, type?: any, traits?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystemWaypoints200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemWaypoints(systemSymbol, page, limit, type, traits, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a paginated list of all systems.
         * @summary List Systems
         * @param {any} [page] What entry offset to request
         * @param {any} [limit] How many entries to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystems(page?: any, limit?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSystems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystems(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * View the details of a waypoint.  If the waypoint is uncharted, it will return the \'Uncharted\' trait instead of its actual traits.
         * @summary Get Waypoint
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWaypoint(systemSymbol: any, waypointSymbol: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWaypoint200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWaypoint(systemSymbol, waypointSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.  The good must be in your ship\'s cargo. The good will be removed from your ship\'s cargo and added to the construction site\'s materials.
         * @summary Supply Construction Site
         * @param {any} systemSymbol The system symbol
         * @param {any} waypointSymbol The waypoint symbol
         * @param {SupplyConstructionRequest} [supplyConstructionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyConstruction(systemSymbol: any, waypointSymbol: any, supplyConstructionRequest?: SupplyConstructionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplyConstruction201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyConstruction(systemSymbol, waypointSymbol, supplyConstructionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemsApi - factory interface
 * @export
 */
export const SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsApiFp(configuration)
    return {
        /**
         * Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
         * @summary Get Construction Site
         * @param {SystemsApiGetConstructionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConstruction(requestParameters: SystemsApiGetConstructionRequest, options?: AxiosRequestConfig): AxiosPromise<GetConstruction200Response> {
            return localVarFp.getConstruction(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.  Waypoints connected to this jump gate can be 
         * @summary Get Jump Gate
         * @param {SystemsApiGetJumpGateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJumpGate(requestParameters: SystemsApiGetJumpGateRequest, options?: AxiosRequestConfig): AxiosPromise<GetJumpGate200Response> {
            return localVarFp.getJumpGate(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
         * @summary Get Market
         * @param {SystemsApiGetMarketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarket(requestParameters: SystemsApiGetMarketRequest, options?: AxiosRequestConfig): AxiosPromise<GetMarket200Response> {
            return localVarFp.getMarket(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
         * @summary Get Shipyard
         * @param {SystemsApiGetShipyardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipyard(requestParameters: SystemsApiGetShipyardRequest, options?: AxiosRequestConfig): AxiosPromise<GetShipyard200Response> {
            return localVarFp.getShipyard(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a system.
         * @summary Get System
         * @param {SystemsApiGetSystemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem(requestParameters: SystemsApiGetSystemRequest, options?: AxiosRequestConfig): AxiosPromise<GetSystem200Response> {
            return localVarFp.getSystem(requestParameters.systemSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
         * @summary List Waypoints in System
         * @param {SystemsApiGetSystemWaypointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWaypoints(requestParameters: SystemsApiGetSystemWaypointsRequest, options?: AxiosRequestConfig): AxiosPromise<GetSystemWaypoints200Response> {
            return localVarFp.getSystemWaypoints(requestParameters.systemSymbol, requestParameters.page, requestParameters.limit, requestParameters.type, requestParameters.traits, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a paginated list of all systems.
         * @summary List Systems
         * @param {SystemsApiGetSystemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems(requestParameters: SystemsApiGetSystemsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetSystems200Response> {
            return localVarFp.getSystems(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * View the details of a waypoint.  If the waypoint is uncharted, it will return the \'Uncharted\' trait instead of its actual traits.
         * @summary Get Waypoint
         * @param {SystemsApiGetWaypointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWaypoint(requestParameters: SystemsApiGetWaypointRequest, options?: AxiosRequestConfig): AxiosPromise<GetWaypoint200Response> {
            return localVarFp.getWaypoint(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.  The good must be in your ship\'s cargo. The good will be removed from your ship\'s cargo and added to the construction site\'s materials.
         * @summary Supply Construction Site
         * @param {SystemsApiSupplyConstructionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyConstruction(requestParameters: SystemsApiSupplyConstructionRequest, options?: AxiosRequestConfig): AxiosPromise<SupplyConstruction201Response> {
            return localVarFp.supplyConstruction(requestParameters.systemSymbol, requestParameters.waypointSymbol, requestParameters.supplyConstructionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConstruction operation in SystemsApi.
 * @export
 * @interface SystemsApiGetConstructionRequest
 */
export interface SystemsApiGetConstructionRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetConstruction
     */
    readonly systemSymbol: any

    /**
     * The waypoint symbol
     * @type {any}
     * @memberof SystemsApiGetConstruction
     */
    readonly waypointSymbol: any
}

/**
 * Request parameters for getJumpGate operation in SystemsApi.
 * @export
 * @interface SystemsApiGetJumpGateRequest
 */
export interface SystemsApiGetJumpGateRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetJumpGate
     */
    readonly systemSymbol: any

    /**
     * The waypoint symbol
     * @type {any}
     * @memberof SystemsApiGetJumpGate
     */
    readonly waypointSymbol: any
}

/**
 * Request parameters for getMarket operation in SystemsApi.
 * @export
 * @interface SystemsApiGetMarketRequest
 */
export interface SystemsApiGetMarketRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetMarket
     */
    readonly systemSymbol: any

    /**
     * The waypoint symbol
     * @type {any}
     * @memberof SystemsApiGetMarket
     */
    readonly waypointSymbol: any
}

/**
 * Request parameters for getShipyard operation in SystemsApi.
 * @export
 * @interface SystemsApiGetShipyardRequest
 */
export interface SystemsApiGetShipyardRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetShipyard
     */
    readonly systemSymbol: any

    /**
     * The waypoint symbol
     * @type {any}
     * @memberof SystemsApiGetShipyard
     */
    readonly waypointSymbol: any
}

/**
 * Request parameters for getSystem operation in SystemsApi.
 * @export
 * @interface SystemsApiGetSystemRequest
 */
export interface SystemsApiGetSystemRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetSystem
     */
    readonly systemSymbol: any
}

/**
 * Request parameters for getSystemWaypoints operation in SystemsApi.
 * @export
 * @interface SystemsApiGetSystemWaypointsRequest
 */
export interface SystemsApiGetSystemWaypointsRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetSystemWaypoints
     */
    readonly systemSymbol: any

    /**
     * What entry offset to request
     * @type {any}
     * @memberof SystemsApiGetSystemWaypoints
     */
    readonly page?: any

    /**
     * How many entries to return per page
     * @type {any}
     * @memberof SystemsApiGetSystemWaypoints
     */
    readonly limit?: any

    /**
     * Filter waypoints by type.
     * @type {any}
     * @memberof SystemsApiGetSystemWaypoints
     */
    readonly type?: any

    /**
     * Filter waypoints by one or more traits.
     * @type {any}
     * @memberof SystemsApiGetSystemWaypoints
     */
    readonly traits?: any
}

/**
 * Request parameters for getSystems operation in SystemsApi.
 * @export
 * @interface SystemsApiGetSystemsRequest
 */
export interface SystemsApiGetSystemsRequest {
    /**
     * What entry offset to request
     * @type {any}
     * @memberof SystemsApiGetSystems
     */
    readonly page?: any

    /**
     * How many entries to return per page
     * @type {any}
     * @memberof SystemsApiGetSystems
     */
    readonly limit?: any
}

/**
 * Request parameters for getWaypoint operation in SystemsApi.
 * @export
 * @interface SystemsApiGetWaypointRequest
 */
export interface SystemsApiGetWaypointRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiGetWaypoint
     */
    readonly systemSymbol: any

    /**
     * The waypoint symbol
     * @type {any}
     * @memberof SystemsApiGetWaypoint
     */
    readonly waypointSymbol: any
}

/**
 * Request parameters for supplyConstruction operation in SystemsApi.
 * @export
 * @interface SystemsApiSupplyConstructionRequest
 */
export interface SystemsApiSupplyConstructionRequest {
    /**
     * The system symbol
     * @type {any}
     * @memberof SystemsApiSupplyConstruction
     */
    readonly systemSymbol: any

    /**
     * The waypoint symbol
     * @type {any}
     * @memberof SystemsApiSupplyConstruction
     */
    readonly waypointSymbol: any

    /**
     * 
     * @type {SupplyConstructionRequest}
     * @memberof SystemsApiSupplyConstruction
     */
    readonly supplyConstructionRequest?: SupplyConstructionRequest
}

/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export class SystemsApi extends BaseAPI {
    /**
     * Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
     * @summary Get Construction Site
     * @param {SystemsApiGetConstructionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getConstruction(requestParameters: SystemsApiGetConstructionRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getConstruction(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.  Waypoints connected to this jump gate can be 
     * @summary Get Jump Gate
     * @param {SystemsApiGetJumpGateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getJumpGate(requestParameters: SystemsApiGetJumpGateRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getJumpGate(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
     * @summary Get Market
     * @param {SystemsApiGetMarketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getMarket(requestParameters: SystemsApiGetMarketRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getMarket(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
     * @summary Get Shipyard
     * @param {SystemsApiGetShipyardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getShipyard(requestParameters: SystemsApiGetShipyardRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getShipyard(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a system.
     * @summary Get System
     * @param {SystemsApiGetSystemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystem(requestParameters: SystemsApiGetSystemRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getSystem(requestParameters.systemSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
     * @summary List Waypoints in System
     * @param {SystemsApiGetSystemWaypointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystemWaypoints(requestParameters: SystemsApiGetSystemWaypointsRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getSystemWaypoints(requestParameters.systemSymbol, requestParameters.page, requestParameters.limit, requestParameters.type, requestParameters.traits, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a paginated list of all systems.
     * @summary List Systems
     * @param {SystemsApiGetSystemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getSystems(requestParameters: SystemsApiGetSystemsRequest = {}, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getSystems(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View the details of a waypoint.  If the waypoint is uncharted, it will return the \'Uncharted\' trait instead of its actual traits.
     * @summary Get Waypoint
     * @param {SystemsApiGetWaypointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public getWaypoint(requestParameters: SystemsApiGetWaypointRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).getWaypoint(requestParameters.systemSymbol, requestParameters.waypointSymbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.  The good must be in your ship\'s cargo. The good will be removed from your ship\'s cargo and added to the construction site\'s materials.
     * @summary Supply Construction Site
     * @param {SystemsApiSupplyConstructionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public supplyConstruction(requestParameters: SystemsApiSupplyConstructionRequest, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).supplyConstruction(requestParameters.systemSymbol, requestParameters.waypointSymbol, requestParameters.supplyConstructionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
