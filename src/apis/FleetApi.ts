/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChart201Response,
  CreateShipShipScan201Response,
  CreateShipSystemScan201Response,
  CreateShipWaypointScan201Response,
  CreateSurvey201Response,
  DockShip200Response,
  ExtractResources201Response,
  ExtractResourcesRequest,
  GetMounts200Response,
  GetMyShip200Response,
  GetMyShipCargo200Response,
  GetMyShips200Response,
  GetShipCooldown200Response,
  GetShipNav200Response,
  InstallMount201Response,
  InstallMountRequest,
  Jettison200Response,
  JettisonRequest,
  JumpShip200Response,
  JumpShipRequest,
  NavigateShip200Response,
  NavigateShipRequest,
  NegotiateContract200Response,
  OrbitShip200Response,
  PatchShipNavRequest,
  PurchaseCargo201Response,
  PurchaseCargoRequest,
  PurchaseShip201Response,
  PurchaseShipRequest,
  RefuelShip200Response,
  RefuelShipRequest,
  RemoveMount201Response,
  RemoveMountRequest,
  SellCargo201Response,
  SellCargoRequest,
  ShipRefine201Response,
  ShipRefineRequest,
  SiphonResources201Response,
  Survey,
  TransferCargo200Response,
  TransferCargoRequest,
} from '../models';
import {
    CreateChart201ResponseFromJSON,
    CreateChart201ResponseToJSON,
    CreateShipShipScan201ResponseFromJSON,
    CreateShipShipScan201ResponseToJSON,
    CreateShipSystemScan201ResponseFromJSON,
    CreateShipSystemScan201ResponseToJSON,
    CreateShipWaypointScan201ResponseFromJSON,
    CreateShipWaypointScan201ResponseToJSON,
    CreateSurvey201ResponseFromJSON,
    CreateSurvey201ResponseToJSON,
    DockShip200ResponseFromJSON,
    DockShip200ResponseToJSON,
    ExtractResources201ResponseFromJSON,
    ExtractResources201ResponseToJSON,
    ExtractResourcesRequestFromJSON,
    ExtractResourcesRequestToJSON,
    GetMounts200ResponseFromJSON,
    GetMounts200ResponseToJSON,
    GetMyShip200ResponseFromJSON,
    GetMyShip200ResponseToJSON,
    GetMyShipCargo200ResponseFromJSON,
    GetMyShipCargo200ResponseToJSON,
    GetMyShips200ResponseFromJSON,
    GetMyShips200ResponseToJSON,
    GetShipCooldown200ResponseFromJSON,
    GetShipCooldown200ResponseToJSON,
    GetShipNav200ResponseFromJSON,
    GetShipNav200ResponseToJSON,
    InstallMount201ResponseFromJSON,
    InstallMount201ResponseToJSON,
    InstallMountRequestFromJSON,
    InstallMountRequestToJSON,
    Jettison200ResponseFromJSON,
    Jettison200ResponseToJSON,
    JettisonRequestFromJSON,
    JettisonRequestToJSON,
    JumpShip200ResponseFromJSON,
    JumpShip200ResponseToJSON,
    JumpShipRequestFromJSON,
    JumpShipRequestToJSON,
    NavigateShip200ResponseFromJSON,
    NavigateShip200ResponseToJSON,
    NavigateShipRequestFromJSON,
    NavigateShipRequestToJSON,
    NegotiateContract200ResponseFromJSON,
    NegotiateContract200ResponseToJSON,
    OrbitShip200ResponseFromJSON,
    OrbitShip200ResponseToJSON,
    PatchShipNavRequestFromJSON,
    PatchShipNavRequestToJSON,
    PurchaseCargo201ResponseFromJSON,
    PurchaseCargo201ResponseToJSON,
    PurchaseCargoRequestFromJSON,
    PurchaseCargoRequestToJSON,
    PurchaseShip201ResponseFromJSON,
    PurchaseShip201ResponseToJSON,
    PurchaseShipRequestFromJSON,
    PurchaseShipRequestToJSON,
    RefuelShip200ResponseFromJSON,
    RefuelShip200ResponseToJSON,
    RefuelShipRequestFromJSON,
    RefuelShipRequestToJSON,
    RemoveMount201ResponseFromJSON,
    RemoveMount201ResponseToJSON,
    RemoveMountRequestFromJSON,
    RemoveMountRequestToJSON,
    SellCargo201ResponseFromJSON,
    SellCargo201ResponseToJSON,
    SellCargoRequestFromJSON,
    SellCargoRequestToJSON,
    ShipRefine201ResponseFromJSON,
    ShipRefine201ResponseToJSON,
    ShipRefineRequestFromJSON,
    ShipRefineRequestToJSON,
    SiphonResources201ResponseFromJSON,
    SiphonResources201ResponseToJSON,
    SurveyFromJSON,
    SurveyToJSON,
    TransferCargo200ResponseFromJSON,
    TransferCargo200ResponseToJSON,
    TransferCargoRequestFromJSON,
    TransferCargoRequestToJSON,
} from '../models';

export interface CreateChartRequest {
    shipSymbol: string;
}

export interface CreateShipShipScanRequest {
    shipSymbol: string;
}

export interface CreateShipSystemScanRequest {
    shipSymbol: string;
}

export interface CreateShipWaypointScanRequest {
    shipSymbol: string;
}

export interface CreateSurveyRequest {
    shipSymbol: string;
}

export interface DockShipRequest {
    shipSymbol: string;
}

export interface ExtractResourcesOperationRequest {
    shipSymbol: string;
    extractResourcesRequest?: ExtractResourcesRequest;
}

export interface ExtractResourcesWithSurveyRequest {
    shipSymbol: string;
    survey?: Survey;
}

export interface GetMountsRequest {
    shipSymbol: string;
}

export interface GetMyShipRequest {
    shipSymbol: string;
}

export interface GetMyShipCargoRequest {
    shipSymbol: string;
}

export interface GetMyShipsRequest {
    page?: number;
    limit?: number;
}

export interface GetShipCooldownRequest {
    shipSymbol: string;
}

export interface GetShipNavRequest {
    shipSymbol: string;
}

export interface InstallMountOperationRequest {
    shipSymbol: string;
    installMountRequest?: InstallMountRequest;
}

export interface JettisonOperationRequest {
    shipSymbol: string;
    jettisonRequest?: JettisonRequest;
}

export interface JumpShipOperationRequest {
    shipSymbol: string;
    jumpShipRequest?: JumpShipRequest;
}

export interface NavigateShipOperationRequest {
    shipSymbol: string;
    navigateShipRequest?: NavigateShipRequest;
}

export interface NegotiateContractRequest {
    shipSymbol: string;
}

export interface OrbitShipRequest {
    shipSymbol: string;
}

export interface PatchShipNavOperationRequest {
    shipSymbol: string;
    patchShipNavRequest?: PatchShipNavRequest;
}

export interface PurchaseCargoOperationRequest {
    shipSymbol: string;
    purchaseCargoRequest?: PurchaseCargoRequest;
}

export interface PurchaseShipOperationRequest {
    purchaseShipRequest?: PurchaseShipRequest;
}

export interface RefuelShipOperationRequest {
    shipSymbol: string;
    refuelShipRequest?: RefuelShipRequest;
}

export interface RemoveMountOperationRequest {
    shipSymbol: string;
    removeMountRequest?: RemoveMountRequest;
}

export interface SellCargoOperationRequest {
    shipSymbol: string;
    sellCargoRequest?: SellCargoRequest;
}

export interface ShipRefineOperationRequest {
    shipSymbol: string;
    shipRefineRequest?: ShipRefineRequest;
}

export interface SiphonResourcesRequest {
    shipSymbol: string;
}

export interface TransferCargoOperationRequest {
    shipSymbol: string;
    transferCargoRequest?: TransferCargoRequest;
}

export interface WarpShipRequest {
    shipSymbol: string;
    navigateShipRequest?: NavigateShipRequest;
}

/**
 * 
 */
export class FleetApi extends runtime.BaseAPI {

    /**
     * Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint\'s traits.
     * Create Chart
     */
    async createChartRaw(requestParameters: CreateChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChart201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createChart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/chart`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateChart201ResponseFromJSON(jsonValue));
    }

    /**
     * Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint\'s traits.
     * Create Chart
     */
    async createChart(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChart201Response> {
        const response = await this.createChartRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the `Sensor Array` mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
     * Scan Ships
     */
    async createShipShipScanRaw(requestParameters: CreateShipShipScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateShipShipScan201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createShipShipScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/scan/ships`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateShipShipScan201ResponseFromJSON(jsonValue));
    }

    /**
     * Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the `Sensor Array` mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
     * Scan Ships
     */
    async createShipShipScan(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateShipShipScan201Response> {
        const response = await this.createShipShipScanRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Scan for nearby systems, retrieving information on the systems\' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
     * Scan Systems
     */
    async createShipSystemScanRaw(requestParameters: CreateShipSystemScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateShipSystemScan201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createShipSystemScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/scan/systems`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateShipSystemScan201ResponseFromJSON(jsonValue));
    }

    /**
     * Scan for nearby systems, retrieving information on the systems\' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
     * Scan Systems
     */
    async createShipSystemScan(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateShipSystemScan201Response> {
        const response = await this.createShipSystemScanRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints\' traits.  Requires a ship to have the `Sensor Array` mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
     * Scan Waypoints
     */
    async createShipWaypointScanRaw(requestParameters: CreateShipWaypointScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateShipWaypointScan201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createShipWaypointScan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/scan/waypoints`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateShipWaypointScan201ResponseFromJSON(jsonValue));
    }

    /**
     * Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints\' traits.  Requires a ship to have the `Sensor Array` mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
     * Scan Waypoints
     */
    async createShipWaypointScan(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateShipWaypointScan201Response> {
        const response = await this.createShipWaypointScanRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey\'s size. Multiple ships can use the same survey for extraction.  A ship must have the `Surveyor` mount installed in order to use this function.
     * Create Survey
     */
    async createSurveyRaw(requestParameters: CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSurvey201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling createSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/survey`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSurvey201ResponseFromJSON(jsonValue));
    }

    /**
     * Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey\'s size. Multiple ships can use the same survey for extraction.  A ship must have the `Surveyor` mount installed in order to use this function.
     * Create Survey
     */
    async createSurvey(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSurvey201Response> {
        const response = await this.createSurveyRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * Dock Ship
     */
    async dockShipRaw(requestParameters: DockShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DockShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling dockShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/dock`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DockShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * Dock Ship
     */
    async dockShip(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DockShip200Response> {
        const response = await this.dockShipRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.  The survey property is now deprecated. See the `extract/survey` endpoint for more details.
     * Extract Resources
     */
    async extractResourcesRaw(requestParameters: ExtractResourcesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractResources201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling extractResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/extract`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtractResourcesRequestToJSON(requestParameters.extractResourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractResources201ResponseFromJSON(jsonValue));
    }

    /**
     * Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.  The survey property is now deprecated. See the `extract/survey` endpoint for more details.
     * Extract Resources
     */
    async extractResources(shipSymbol: string, extractResourcesRequest?: ExtractResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractResources201Response> {
        const response = await this.extractResourcesRaw({ shipSymbol: shipSymbol, extractResourcesRequest: extractResourcesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
     * Extract Resources with Survey
     */
    async extractResourcesWithSurveyRaw(requestParameters: ExtractResourcesWithSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractResources201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling extractResourcesWithSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/extract/survey`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SurveyToJSON(requestParameters.survey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractResources201ResponseFromJSON(jsonValue));
    }

    /**
     * Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.  Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
     * Extract Resources with Survey
     */
    async extractResourcesWithSurvey(shipSymbol: string, survey?: Survey, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractResources201Response> {
        const response = await this.extractResourcesWithSurveyRaw({ shipSymbol: shipSymbol, survey: survey }, initOverrides);
        return await response.value();
    }

    /**
     * Get the mounts installed on a ship.
     * Get Mounts
     */
    async getMountsRaw(requestParameters: GetMountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMounts200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getMounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/mounts`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMounts200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the mounts installed on a ship.
     * Get Mounts
     */
    async getMounts(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMounts200Response> {
        const response = await this.getMountsRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details of a ship under your agent\'s ownership.
     * Get Ship
     */
    async getMyShipRaw(requestParameters: GetMyShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getMyShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of a ship under your agent\'s ownership.
     * Get Ship
     */
    async getMyShip(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyShip200Response> {
        const response = await this.getMyShipRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the cargo of a ship under your agent\'s ownership.
     * Get Ship Cargo
     */
    async getMyShipCargoRaw(requestParameters: GetMyShipCargoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyShipCargo200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getMyShipCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/cargo`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyShipCargo200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the cargo of a ship under your agent\'s ownership.
     * Get Ship Cargo
     */
    async getMyShipCargo(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyShipCargo200Response> {
        const response = await this.getMyShipCargoRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Return a paginated list of all of ships under your agent\'s ownership.
     * List Ships
     */
    async getMyShipsRaw(requestParameters: GetMyShipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyShips200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyShips200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a paginated list of all of ships under your agent\'s ownership.
     * List Ships
     */
    async getMyShips(page?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyShips200Response> {
        const response = await this.getMyShipsRaw({ page: page, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * Get Ship Cooldown
     */
    async getShipCooldownRaw(requestParameters: GetShipCooldownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShipCooldown200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getShipCooldown.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/cooldown`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShipCooldown200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of your ship\'s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     * Get Ship Cooldown
     */
    async getShipCooldown(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShipCooldown200Response> {
        const response = await this.getShipCooldownRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Get the current nav status of a ship.
     * Get Ship Nav
     */
    async getShipNavRaw(requestParameters: GetShipNavRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShipNav200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling getShipNav.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/nav`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShipNav200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the current nav status of a ship.
     * Get Ship Nav
     */
    async getShipNav(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShipNav200Response> {
        const response = await this.getShipNavRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
     * Install Mount
     */
    async installMountRaw(requestParameters: InstallMountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstallMount201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling installMount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/mounts/install`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstallMountRequestToJSON(requestParameters.installMountRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallMount201ResponseFromJSON(jsonValue));
    }

    /**
     * Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
     * Install Mount
     */
    async installMount(shipSymbol: string, installMountRequest?: InstallMountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstallMount201Response> {
        const response = await this.installMountRaw({ shipSymbol: shipSymbol, installMountRequest: installMountRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Jettison cargo from your ship\'s cargo hold.
     * Jettison Cargo
     */
    async jettisonRaw(requestParameters: JettisonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Jettison200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling jettison.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/jettison`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JettisonRequestToJSON(requestParameters.jettisonRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Jettison200ResponseFromJSON(jsonValue));
    }

    /**
     * Jettison cargo from your ship\'s cargo hold.
     * Jettison Cargo
     */
    async jettison(shipSymbol: string, jettisonRequest?: JettisonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Jettison200Response> {
        const response = await this.jettisonRaw({ shipSymbol: shipSymbol, jettisonRequest: jettisonRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
     * Jump Ship
     */
    async jumpShipRaw(requestParameters: JumpShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JumpShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling jumpShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/jump`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JumpShipRequestToJSON(requestParameters.jumpShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JumpShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.  A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
     * Jump Ship
     */
    async jumpShip(shipSymbol: string, jumpShipRequest?: JumpShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JumpShip200Response> {
        const response = await this.jumpShipRaw({ shipSymbol: shipSymbol, jumpShipRequest: jumpShipRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship\'s current location. Navigating will consume the necessary fuel from the ship\'s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s Warp or Jump actions.
     * Navigate Ship
     */
    async navigateShipRaw(requestParameters: NavigateShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NavigateShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling navigateShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/navigate`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NavigateShipRequestToJSON(requestParameters.navigateShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NavigateShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship\'s current location. Navigating will consume the necessary fuel from the ship\'s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it\'s destination.  To travel between systems, see the ship\'s Warp or Jump actions.
     * Navigate Ship
     */
    async navigateShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NavigateShip200Response> {
        const response = await this.navigateShipRaw({ shipSymbol: shipSymbol, navigateShipRequest: navigateShipRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
     * Negotiate Contract
     */
    async negotiateContractRaw(requestParameters: NegotiateContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiateContract200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling negotiateContract.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/negotiate/contract`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiateContract200ResponseFromJSON(jsonValue));
    }

    /**
     * Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
     * Negotiate Contract
     */
    async negotiateContract(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiateContract200Response> {
        const response = await this.negotiateContractRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * Orbit Ship
     */
    async orbitShipRaw(requestParameters: OrbitShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrbitShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling orbitShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/orbit`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrbitShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * Orbit Ship
     */
    async orbitShip(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrbitShip200Response> {
        const response = await this.orbitShipRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
     * Patch Ship Nav
     */
    async patchShipNavRaw(requestParameters: PatchShipNavOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetShipNav200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling patchShipNav.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/nav`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchShipNavRequestToJSON(requestParameters.patchShipNavRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetShipNav200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
     * Patch Ship Nav
     */
    async patchShipNav(shipSymbol: string, patchShipNavRequest?: PatchShipNavRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetShipNav200Response> {
        const response = await this.patchShipNavRaw({ shipSymbol: shipSymbol, patchShipNavRequest: patchShipNavRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Purchase cargo from a market.  The ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship\'s cargo hold.
     * Purchase Cargo
     */
    async purchaseCargoRaw(requestParameters: PurchaseCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseCargo201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling purchaseCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/purchase`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseCargoRequestToJSON(requestParameters.purchaseCargoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseCargo201ResponseFromJSON(jsonValue));
    }

    /**
     * Purchase cargo from a market.  The ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship\'s cargo hold.
     * Purchase Cargo
     */
    async purchaseCargo(shipSymbol: string, purchaseCargoRequest?: PurchaseCargoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseCargo201Response> {
        const response = await this.purchaseCargoRaw({ shipSymbol: shipSymbol, purchaseCargoRequest: purchaseCargoRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Purchase a ship from a Shipyard. In order to use this function, a ship under your agent\'s ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
     * Purchase Ship
     */
    async purchaseShipRaw(requestParameters: PurchaseShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseShip201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseShipRequestToJSON(requestParameters.purchaseShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseShip201ResponseFromJSON(jsonValue));
    }

    /**
     * Purchase a ship from a Shipyard. In order to use this function, a ship under your agent\'s ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
     * Purchase Ship
     */
    async purchaseShip(purchaseShipRequest?: PurchaseShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseShip201Response> {
        const response = await this.purchaseShipRaw({ purchaseShipRequest: purchaseShipRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship\'s fuel.  Ships will always be refuel to their frame\'s maximum fuel capacity when using this action.
     * Refuel Ship
     */
    async refuelShipRaw(requestParameters: RefuelShipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefuelShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling refuelShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/refuel`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefuelShipRequestToJSON(requestParameters.refuelShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefuelShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship\'s fuel.  Ships will always be refuel to their frame\'s maximum fuel capacity when using this action.
     * Refuel Ship
     */
    async refuelShip(shipSymbol: string, refuelShipRequest?: RefuelShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefuelShip200Response> {
        const response = await this.refuelShipRaw({ shipSymbol: shipSymbol, refuelShipRequest: refuelShipRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Remove a mount from a ship.  The ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
     * Remove Mount
     */
    async removeMountRaw(requestParameters: RemoveMountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveMount201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling removeMount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/mounts/remove`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMountRequestToJSON(requestParameters.removeMountRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveMount201ResponseFromJSON(jsonValue));
    }

    /**
     * Remove a mount from a ship.  The ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
     * Remove Mount
     */
    async removeMount(shipSymbol: string, removeMountRequest?: RemoveMountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveMount201Response> {
        const response = await this.removeMountRaw({ shipSymbol: shipSymbol, removeMountRequest: removeMountRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.
     * Sell Cargo
     */
    async sellCargoRaw(requestParameters: SellCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellCargo201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling sellCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/sell`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SellCargoRequestToJSON(requestParameters.sellCargoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellCargo201ResponseFromJSON(jsonValue));
    }

    /**
     * Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.
     * Sell Cargo
     */
    async sellCargo(shipSymbol: string, sellCargoRequest?: SellCargoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellCargo201Response> {
        const response = await this.sellCargoRaw({ shipSymbol: shipSymbol, sellCargoRequest: sellCargoRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
     * Ship Refine
     */
    async shipRefineRaw(requestParameters: ShipRefineOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipRefine201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling shipRefine.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/refine`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShipRefineRequestToJSON(requestParameters.shipRefineRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipRefine201ResponseFromJSON(jsonValue));
    }

    /**
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
     * Ship Refine
     */
    async shipRefine(shipSymbol: string, shipRefineRequest?: ShipRefineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipRefine201Response> {
        const response = await this.shipRefineRaw({ shipSymbol: shipSymbol, shipRefineRequest: shipRefineRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Siphon gases, such as hydrocarbon, from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
     * Siphon Resources
     */
    async siphonResourcesRaw(requestParameters: SiphonResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiphonResources201Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling siphonResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/siphon`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiphonResources201ResponseFromJSON(jsonValue));
    }

    /**
     * Siphon gases, such as hydrocarbon, from gas giants.  The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
     * Siphon Resources
     */
    async siphonResources(shipSymbol: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiphonResources201Response> {
        const response = await this.siphonResourcesRaw({ shipSymbol: shipSymbol }, initOverrides);
        return await response.value();
    }

    /**
     * Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body\'s cargo shows the cargo of the transferring ship after the transfer is complete.
     * Transfer Cargo
     */
    async transferCargoRaw(requestParameters: TransferCargoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferCargo200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling transferCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/transfer`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferCargoRequestToJSON(requestParameters.transferCargoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferCargo200ResponseFromJSON(jsonValue));
    }

    /**
     * Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body\'s cargo shows the cargo of the transferring ship after the transfer is complete.
     * Transfer Cargo
     */
    async transferCargo(shipSymbol: string, transferCargoRequest?: TransferCargoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferCargo200Response> {
        const response = await this.transferCargoRaw({ shipSymbol: shipSymbol, transferCargoRequest: transferCargoRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship\'s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
     * Warp Ship
     */
    async warpShipRaw(requestParameters: WarpShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NavigateShip200Response>> {
        if (requestParameters.shipSymbol === null || requestParameters.shipSymbol === undefined) {
            throw new runtime.RequiredError('shipSymbol','Required parameter requestParameters.shipSymbol was null or undefined when calling warpShip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AgentToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/my/ships/{shipSymbol}/warp`.replace(`{${"shipSymbol"}}`, encodeURIComponent(String(requestParameters.shipSymbol))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NavigateShipRequestToJSON(requestParameters.navigateShipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NavigateShip200ResponseFromJSON(jsonValue));
    }

    /**
     * Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship\'s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
     * Warp Ship
     */
    async warpShip(shipSymbol: string, navigateShipRequest?: NavigateShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NavigateShip200Response> {
        const response = await this.warpShipRaw({ shipSymbol: shipSymbol, navigateShipRequest: navigateShipRequest }, initOverrides);
        return await response.value();
    }

}
