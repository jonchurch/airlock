/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityLevel } from './ActivityLevel';
import {
    ActivityLevelFromJSON,
    ActivityLevelFromJSONTyped,
    ActivityLevelToJSON,
} from './ActivityLevel';
import type { SupplyLevel } from './SupplyLevel';
import {
    SupplyLevelFromJSON,
    SupplyLevelFromJSONTyped,
    SupplyLevelToJSON,
} from './SupplyLevel';
import type { TradeSymbol } from './TradeSymbol';
import {
    TradeSymbolFromJSON,
    TradeSymbolFromJSONTyped,
    TradeSymbolToJSON,
} from './TradeSymbol';

/**
 * 
 * @export
 * @interface MarketTradeGood
 */
export interface MarketTradeGood {
    /**
     * 
     * @type {TradeSymbol}
     * @memberof MarketTradeGood
     */
    symbol: TradeSymbol;
    /**
     * The type of trade good (export, import, or exchange).
     * @type {string}
     * @memberof MarketTradeGood
     */
    type: MarketTradeGoodTypeEnum;
    /**
     * This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.
     * @type {number}
     * @memberof MarketTradeGood
     */
    tradeVolume: number;
    /**
     * 
     * @type {SupplyLevel}
     * @memberof MarketTradeGood
     */
    supply: SupplyLevel;
    /**
     * 
     * @type {ActivityLevel}
     * @memberof MarketTradeGood
     */
    activity?: ActivityLevel;
    /**
     * The price at which this good can be purchased from the market.
     * @type {number}
     * @memberof MarketTradeGood
     */
    purchasePrice: number;
    /**
     * The price at which this good can be sold to the market.
     * @type {number}
     * @memberof MarketTradeGood
     */
    sellPrice: number;
}


/**
 * @export
 */
export const MarketTradeGoodTypeEnum = {
    Export: 'EXPORT',
    Import: 'IMPORT',
    Exchange: 'EXCHANGE'
} as const;
export type MarketTradeGoodTypeEnum = typeof MarketTradeGoodTypeEnum[keyof typeof MarketTradeGoodTypeEnum];


/**
 * Check if a given object implements the MarketTradeGood interface.
 */
export function instanceOfMarketTradeGood(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "tradeVolume" in value;
    isInstance = isInstance && "supply" in value;
    isInstance = isInstance && "purchasePrice" in value;
    isInstance = isInstance && "sellPrice" in value;

    return isInstance;
}

export function MarketTradeGoodFromJSON(json: any): MarketTradeGood {
    return MarketTradeGoodFromJSONTyped(json, false);
}

export function MarketTradeGoodFromJSONTyped(json: any, ignoreDiscriminator: boolean): MarketTradeGood {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': TradeSymbolFromJSON(json['symbol']),
        'type': json['type'],
        'tradeVolume': json['tradeVolume'],
        'supply': SupplyLevelFromJSON(json['supply']),
        'activity': !exists(json, 'activity') ? undefined : ActivityLevelFromJSON(json['activity']),
        'purchasePrice': json['purchasePrice'],
        'sellPrice': json['sellPrice'],
    };
}

export function MarketTradeGoodToJSON(value?: MarketTradeGood | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': TradeSymbolToJSON(value.symbol),
        'type': value.type,
        'tradeVolume': value.tradeVolume,
        'supply': SupplyLevelToJSON(value.supply),
        'activity': ActivityLevelToJSON(value.activity),
        'purchasePrice': value.purchasePrice,
        'sellPrice': value.sellPrice,
    };
}

