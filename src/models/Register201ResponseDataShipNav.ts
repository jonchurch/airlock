/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Register201ResponseDataShipNavRoute } from './Register201ResponseDataShipNavRoute';
import {
    Register201ResponseDataShipNavRouteFromJSON,
    Register201ResponseDataShipNavRouteFromJSONTyped,
    Register201ResponseDataShipNavRouteToJSON,
} from './Register201ResponseDataShipNavRoute';

/**
 * The navigation information of the ship.
 * @export
 * @interface Register201ResponseDataShipNav
 */
export interface Register201ResponseDataShipNav {
    /**
     * The symbol of the system.
     * @type {any}
     * @memberof Register201ResponseDataShipNav
     */
    systemSymbol: any | null;
    /**
     * The symbol of the waypoint.
     * @type {any}
     * @memberof Register201ResponseDataShipNav
     */
    waypointSymbol: any | null;
    /**
     * 
     * @type {Register201ResponseDataShipNavRoute}
     * @memberof Register201ResponseDataShipNav
     */
    route: Register201ResponseDataShipNavRoute;
    /**
     * The current status of the ship
     * @type {any}
     * @memberof Register201ResponseDataShipNav
     */
    status: Register201ResponseDataShipNavStatusEnum;
    /**
     * The ship's set speed when traveling between waypoints or systems.
     * @type {any}
     * @memberof Register201ResponseDataShipNav
     */
    flightMode: Register201ResponseDataShipNavFlightModeEnum;
}


/**
 * @export
 */
export const Register201ResponseDataShipNavStatusEnum = {
    InTransit: 'IN_TRANSIT',
    InOrbit: 'IN_ORBIT',
    Docked: 'DOCKED'
} as const;
export type Register201ResponseDataShipNavStatusEnum = typeof Register201ResponseDataShipNavStatusEnum[keyof typeof Register201ResponseDataShipNavStatusEnum];

/**
 * @export
 */
export const Register201ResponseDataShipNavFlightModeEnum = {
    Drift: 'DRIFT',
    Stealth: 'STEALTH',
    Cruise: 'CRUISE',
    Burn: 'BURN'
} as const;
export type Register201ResponseDataShipNavFlightModeEnum = typeof Register201ResponseDataShipNavFlightModeEnum[keyof typeof Register201ResponseDataShipNavFlightModeEnum];


/**
 * Check if a given object implements the Register201ResponseDataShipNav interface.
 */
export function instanceOfRegister201ResponseDataShipNav(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "systemSymbol" in value;
    isInstance = isInstance && "waypointSymbol" in value;
    isInstance = isInstance && "route" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "flightMode" in value;

    return isInstance;
}

export function Register201ResponseDataShipNavFromJSON(json: any): Register201ResponseDataShipNav {
    return Register201ResponseDataShipNavFromJSONTyped(json, false);
}

export function Register201ResponseDataShipNavFromJSONTyped(json: any, ignoreDiscriminator: boolean): Register201ResponseDataShipNav {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'systemSymbol': json['systemSymbol'],
        'waypointSymbol': json['waypointSymbol'],
        'route': Register201ResponseDataShipNavRouteFromJSON(json['route']),
        'status': json['status'],
        'flightMode': json['flightMode'],
    };
}

export function Register201ResponseDataShipNavToJSON(value?: Register201ResponseDataShipNav | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'systemSymbol': value.systemSymbol,
        'waypointSymbol': value.waypointSymbol,
        'route': Register201ResponseDataShipNavRouteToJSON(value.route),
        'status': value.status,
        'flightMode': value.flightMode,
    };
}

