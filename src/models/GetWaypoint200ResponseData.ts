/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GetWaypoint200ResponseDataChart } from './GetWaypoint200ResponseDataChart';
import {
    GetWaypoint200ResponseDataChartFromJSON,
    GetWaypoint200ResponseDataChartFromJSONTyped,
    GetWaypoint200ResponseDataChartToJSON,
} from './GetWaypoint200ResponseDataChart';
import type { GetWaypoint200ResponseDataFaction } from './GetWaypoint200ResponseDataFaction';
import {
    GetWaypoint200ResponseDataFactionFromJSON,
    GetWaypoint200ResponseDataFactionFromJSONTyped,
    GetWaypoint200ResponseDataFactionToJSON,
} from './GetWaypoint200ResponseDataFaction';

/**
 * A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
 * @export
 * @interface GetWaypoint200ResponseData
 */
export interface GetWaypoint200ResponseData {
    /**
     * The symbol of the waypoint.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    symbol: any | null;
    /**
     * The type of waypoint.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    type: GetWaypoint200ResponseDataTypeEnum;
    /**
     * The symbol of the system.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    systemSymbol: any | null;
    /**
     * Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    x: any | null;
    /**
     * Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    y: any | null;
    /**
     * Waypoints that orbit this waypoint.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    orbitals: any | null;
    /**
     * The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    orbits?: any | null;
    /**
     * 
     * @type {GetWaypoint200ResponseDataFaction}
     * @memberof GetWaypoint200ResponseData
     */
    faction?: GetWaypoint200ResponseDataFaction;
    /**
     * The traits of the waypoint.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    traits: any | null;
    /**
     * The modifiers of the waypoint.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    modifiers?: any | null;
    /**
     * 
     * @type {GetWaypoint200ResponseDataChart}
     * @memberof GetWaypoint200ResponseData
     */
    chart?: GetWaypoint200ResponseDataChart;
    /**
     * True if the waypoint is under construction.
     * @type {any}
     * @memberof GetWaypoint200ResponseData
     */
    isUnderConstruction: any | null;
}


/**
 * @export
 */
export const GetWaypoint200ResponseDataTypeEnum = {
    Planet: 'PLANET',
    GasGiant: 'GAS_GIANT',
    Moon: 'MOON',
    OrbitalStation: 'ORBITAL_STATION',
    JumpGate: 'JUMP_GATE',
    AsteroidField: 'ASTEROID_FIELD',
    Asteroid: 'ASTEROID',
    EngineeredAsteroid: 'ENGINEERED_ASTEROID',
    AsteroidBase: 'ASTEROID_BASE',
    Nebula: 'NEBULA',
    DebrisField: 'DEBRIS_FIELD',
    GravityWell: 'GRAVITY_WELL',
    ArtificialGravityWell: 'ARTIFICIAL_GRAVITY_WELL',
    FuelStation: 'FUEL_STATION'
} as const;
export type GetWaypoint200ResponseDataTypeEnum = typeof GetWaypoint200ResponseDataTypeEnum[keyof typeof GetWaypoint200ResponseDataTypeEnum];


/**
 * Check if a given object implements the GetWaypoint200ResponseData interface.
 */
export function instanceOfGetWaypoint200ResponseData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "systemSymbol" in value;
    isInstance = isInstance && "x" in value;
    isInstance = isInstance && "y" in value;
    isInstance = isInstance && "orbitals" in value;
    isInstance = isInstance && "traits" in value;
    isInstance = isInstance && "isUnderConstruction" in value;

    return isInstance;
}

export function GetWaypoint200ResponseDataFromJSON(json: any): GetWaypoint200ResponseData {
    return GetWaypoint200ResponseDataFromJSONTyped(json, false);
}

export function GetWaypoint200ResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetWaypoint200ResponseData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'type': json['type'],
        'systemSymbol': json['systemSymbol'],
        'x': json['x'],
        'y': json['y'],
        'orbitals': json['orbitals'],
        'orbits': !exists(json, 'orbits') ? undefined : json['orbits'],
        'faction': !exists(json, 'faction') ? undefined : GetWaypoint200ResponseDataFactionFromJSON(json['faction']),
        'traits': json['traits'],
        'modifiers': !exists(json, 'modifiers') ? undefined : json['modifiers'],
        'chart': !exists(json, 'chart') ? undefined : GetWaypoint200ResponseDataChartFromJSON(json['chart']),
        'isUnderConstruction': json['isUnderConstruction'],
    };
}

export function GetWaypoint200ResponseDataToJSON(value?: GetWaypoint200ResponseData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'type': value.type,
        'systemSymbol': value.systemSymbol,
        'x': value.x,
        'y': value.y,
        'orbitals': value.orbitals,
        'orbits': value.orbits,
        'faction': GetWaypoint200ResponseDataFactionToJSON(value.faction),
        'traits': value.traits,
        'modifiers': value.modifiers,
        'chart': GetWaypoint200ResponseDataChartToJSON(value.chart),
        'isUnderConstruction': value.isUnderConstruction,
    };
}

