/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Register201ResponseDataShipCargo } from './Register201ResponseDataShipCargo';
import {
    Register201ResponseDataShipCargoFromJSON,
    Register201ResponseDataShipCargoFromJSONTyped,
    Register201ResponseDataShipCargoToJSON,
} from './Register201ResponseDataShipCargo';
import type { Register201ResponseDataShipCooldown } from './Register201ResponseDataShipCooldown';
import {
    Register201ResponseDataShipCooldownFromJSON,
    Register201ResponseDataShipCooldownFromJSONTyped,
    Register201ResponseDataShipCooldownToJSON,
} from './Register201ResponseDataShipCooldown';
import type { Register201ResponseDataShipCrew } from './Register201ResponseDataShipCrew';
import {
    Register201ResponseDataShipCrewFromJSON,
    Register201ResponseDataShipCrewFromJSONTyped,
    Register201ResponseDataShipCrewToJSON,
} from './Register201ResponseDataShipCrew';
import type { Register201ResponseDataShipEngine } from './Register201ResponseDataShipEngine';
import {
    Register201ResponseDataShipEngineFromJSON,
    Register201ResponseDataShipEngineFromJSONTyped,
    Register201ResponseDataShipEngineToJSON,
} from './Register201ResponseDataShipEngine';
import type { Register201ResponseDataShipFrame } from './Register201ResponseDataShipFrame';
import {
    Register201ResponseDataShipFrameFromJSON,
    Register201ResponseDataShipFrameFromJSONTyped,
    Register201ResponseDataShipFrameToJSON,
} from './Register201ResponseDataShipFrame';
import type { Register201ResponseDataShipFuel } from './Register201ResponseDataShipFuel';
import {
    Register201ResponseDataShipFuelFromJSON,
    Register201ResponseDataShipFuelFromJSONTyped,
    Register201ResponseDataShipFuelToJSON,
} from './Register201ResponseDataShipFuel';
import type { Register201ResponseDataShipNav } from './Register201ResponseDataShipNav';
import {
    Register201ResponseDataShipNavFromJSON,
    Register201ResponseDataShipNavFromJSONTyped,
    Register201ResponseDataShipNavToJSON,
} from './Register201ResponseDataShipNav';
import type { Register201ResponseDataShipReactor } from './Register201ResponseDataShipReactor';
import {
    Register201ResponseDataShipReactorFromJSON,
    Register201ResponseDataShipReactorFromJSONTyped,
    Register201ResponseDataShipReactorToJSON,
} from './Register201ResponseDataShipReactor';
import type { Register201ResponseDataShipRegistration } from './Register201ResponseDataShipRegistration';
import {
    Register201ResponseDataShipRegistrationFromJSON,
    Register201ResponseDataShipRegistrationFromJSONTyped,
    Register201ResponseDataShipRegistrationToJSON,
} from './Register201ResponseDataShipRegistration';

/**
 * Ship details.
 * @export
 * @interface Register201ResponseDataShip
 */
export interface Register201ResponseDataShip {
    /**
     * The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`
     * @type {any}
     * @memberof Register201ResponseDataShip
     */
    symbol: any | null;
    /**
     * 
     * @type {Register201ResponseDataShipRegistration}
     * @memberof Register201ResponseDataShip
     */
    registration: Register201ResponseDataShipRegistration;
    /**
     * 
     * @type {Register201ResponseDataShipNav}
     * @memberof Register201ResponseDataShip
     */
    nav: Register201ResponseDataShipNav;
    /**
     * 
     * @type {Register201ResponseDataShipCrew}
     * @memberof Register201ResponseDataShip
     */
    crew: Register201ResponseDataShipCrew;
    /**
     * 
     * @type {Register201ResponseDataShipFrame}
     * @memberof Register201ResponseDataShip
     */
    frame: Register201ResponseDataShipFrame;
    /**
     * 
     * @type {Register201ResponseDataShipReactor}
     * @memberof Register201ResponseDataShip
     */
    reactor: Register201ResponseDataShipReactor;
    /**
     * 
     * @type {Register201ResponseDataShipEngine}
     * @memberof Register201ResponseDataShip
     */
    engine: Register201ResponseDataShipEngine;
    /**
     * 
     * @type {Register201ResponseDataShipCooldown}
     * @memberof Register201ResponseDataShip
     */
    cooldown: Register201ResponseDataShipCooldown;
    /**
     * Modules installed in this ship.
     * @type {any}
     * @memberof Register201ResponseDataShip
     */
    modules: any | null;
    /**
     * Mounts installed in this ship.
     * @type {any}
     * @memberof Register201ResponseDataShip
     */
    mounts: any | null;
    /**
     * 
     * @type {Register201ResponseDataShipCargo}
     * @memberof Register201ResponseDataShip
     */
    cargo: Register201ResponseDataShipCargo;
    /**
     * 
     * @type {Register201ResponseDataShipFuel}
     * @memberof Register201ResponseDataShip
     */
    fuel: Register201ResponseDataShipFuel;
}

/**
 * Check if a given object implements the Register201ResponseDataShip interface.
 */
export function instanceOfRegister201ResponseDataShip(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "registration" in value;
    isInstance = isInstance && "nav" in value;
    isInstance = isInstance && "crew" in value;
    isInstance = isInstance && "frame" in value;
    isInstance = isInstance && "reactor" in value;
    isInstance = isInstance && "engine" in value;
    isInstance = isInstance && "cooldown" in value;
    isInstance = isInstance && "modules" in value;
    isInstance = isInstance && "mounts" in value;
    isInstance = isInstance && "cargo" in value;
    isInstance = isInstance && "fuel" in value;

    return isInstance;
}

export function Register201ResponseDataShipFromJSON(json: any): Register201ResponseDataShip {
    return Register201ResponseDataShipFromJSONTyped(json, false);
}

export function Register201ResponseDataShipFromJSONTyped(json: any, ignoreDiscriminator: boolean): Register201ResponseDataShip {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'registration': Register201ResponseDataShipRegistrationFromJSON(json['registration']),
        'nav': Register201ResponseDataShipNavFromJSON(json['nav']),
        'crew': Register201ResponseDataShipCrewFromJSON(json['crew']),
        'frame': Register201ResponseDataShipFrameFromJSON(json['frame']),
        'reactor': Register201ResponseDataShipReactorFromJSON(json['reactor']),
        'engine': Register201ResponseDataShipEngineFromJSON(json['engine']),
        'cooldown': Register201ResponseDataShipCooldownFromJSON(json['cooldown']),
        'modules': json['modules'],
        'mounts': json['mounts'],
        'cargo': Register201ResponseDataShipCargoFromJSON(json['cargo']),
        'fuel': Register201ResponseDataShipFuelFromJSON(json['fuel']),
    };
}

export function Register201ResponseDataShipToJSON(value?: Register201ResponseDataShip | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'registration': Register201ResponseDataShipRegistrationToJSON(value.registration),
        'nav': Register201ResponseDataShipNavToJSON(value.nav),
        'crew': Register201ResponseDataShipCrewToJSON(value.crew),
        'frame': Register201ResponseDataShipFrameToJSON(value.frame),
        'reactor': Register201ResponseDataShipReactorToJSON(value.reactor),
        'engine': Register201ResponseDataShipEngineToJSON(value.engine),
        'cooldown': Register201ResponseDataShipCooldownToJSON(value.cooldown),
        'modules': value.modules,
        'mounts': value.mounts,
        'cargo': Register201ResponseDataShipCargoToJSON(value.cargo),
        'fuel': Register201ResponseDataShipFuelToJSON(value.fuel),
    };
}

