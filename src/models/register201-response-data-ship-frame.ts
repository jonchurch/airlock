/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { Register201ResponseDataShipFrameRequirements } from './register201-response-data-ship-frame-requirements';

/**
 * The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
 * @export
 * @interface Register201ResponseDataShipFrame
 */
export interface Register201ResponseDataShipFrame {
    /**
     * Symbol of the frame.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'symbol': Register201ResponseDataShipFrameSymbolEnum;
    /**
     * Name of the frame.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'name': any;
    /**
     * Description of the frame.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'description': any;
    /**
     * The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'condition': any;
    /**
     * The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'integrity': any;
    /**
     * The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'moduleSlots': any;
    /**
     * The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'mountingPoints': any;
    /**
     * The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'fuelCapacity': any;
    /**
     * 
     * @type {Register201ResponseDataShipFrameRequirements}
     * @memberof Register201ResponseDataShipFrame
     */
    'requirements': Register201ResponseDataShipFrameRequirements;
    /**
     * The overall quality of the component, which determines the quality of the component. High quality components return more ships parts and ship plating when a ship is scrapped. But also require more of these parts to repair. This is transparent to the player, as the parts are bought from/sold to the marketplace.
     * @type {any}
     * @memberof Register201ResponseDataShipFrame
     */
    'quality': any;
}

export const Register201ResponseDataShipFrameSymbolEnum = {
    Probe: 'FRAME_PROBE',
    Drone: 'FRAME_DRONE',
    Interceptor: 'FRAME_INTERCEPTOR',
    Racer: 'FRAME_RACER',
    Fighter: 'FRAME_FIGHTER',
    Frigate: 'FRAME_FRIGATE',
    Shuttle: 'FRAME_SHUTTLE',
    Explorer: 'FRAME_EXPLORER',
    Miner: 'FRAME_MINER',
    LightFreighter: 'FRAME_LIGHT_FREIGHTER',
    HeavyFreighter: 'FRAME_HEAVY_FREIGHTER',
    Transport: 'FRAME_TRANSPORT',
    Destroyer: 'FRAME_DESTROYER',
    Cruiser: 'FRAME_CRUISER',
    Carrier: 'FRAME_CARRIER'
} as const;

export type Register201ResponseDataShipFrameSymbolEnum = typeof Register201ResponseDataShipFrameSymbolEnum[keyof typeof Register201ResponseDataShipFrameSymbolEnum];


