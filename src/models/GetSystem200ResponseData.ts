/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GetSystem200ResponseData
 */
export interface GetSystem200ResponseData {
    /**
     * The symbol of the system.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    symbol: any | null;
    /**
     * The symbol of the sector.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    sectorSymbol: any | null;
    /**
     * The type of system.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    type: GetSystem200ResponseDataTypeEnum;
    /**
     * Relative position of the system in the sector in the x axis.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    x: any | null;
    /**
     * Relative position of the system in the sector in the y axis.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    y: any | null;
    /**
     * Waypoints in this system.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    waypoints: any | null;
    /**
     * Factions that control this system.
     * @type {any}
     * @memberof GetSystem200ResponseData
     */
    factions: any | null;
}


/**
 * @export
 */
export const GetSystem200ResponseDataTypeEnum = {
    NeutronStar: 'NEUTRON_STAR',
    RedStar: 'RED_STAR',
    OrangeStar: 'ORANGE_STAR',
    BlueStar: 'BLUE_STAR',
    YoungStar: 'YOUNG_STAR',
    WhiteDwarf: 'WHITE_DWARF',
    BlackHole: 'BLACK_HOLE',
    Hypergiant: 'HYPERGIANT',
    Nebula: 'NEBULA',
    Unstable: 'UNSTABLE'
} as const;
export type GetSystem200ResponseDataTypeEnum = typeof GetSystem200ResponseDataTypeEnum[keyof typeof GetSystem200ResponseDataTypeEnum];


/**
 * Check if a given object implements the GetSystem200ResponseData interface.
 */
export function instanceOfGetSystem200ResponseData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "sectorSymbol" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "x" in value;
    isInstance = isInstance && "y" in value;
    isInstance = isInstance && "waypoints" in value;
    isInstance = isInstance && "factions" in value;

    return isInstance;
}

export function GetSystem200ResponseDataFromJSON(json: any): GetSystem200ResponseData {
    return GetSystem200ResponseDataFromJSONTyped(json, false);
}

export function GetSystem200ResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetSystem200ResponseData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'sectorSymbol': json['sectorSymbol'],
        'type': json['type'],
        'x': json['x'],
        'y': json['y'],
        'waypoints': json['waypoints'],
        'factions': json['factions'],
    };
}

export function GetSystem200ResponseDataToJSON(value?: GetSystem200ResponseData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'sectorSymbol': value.sectorSymbol,
        'type': value.type,
        'x': value.x,
        'y': value.y,
        'waypoints': value.waypoints,
        'factions': value.factions,
    };
}

