/* tslint:disable */
/* eslint-disable */
/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Register201ResponseDataShipFrameRequirements } from './Register201ResponseDataShipFrameRequirements';
import {
    Register201ResponseDataShipFrameRequirementsFromJSON,
    Register201ResponseDataShipFrameRequirementsFromJSONTyped,
    Register201ResponseDataShipFrameRequirementsToJSON,
} from './Register201ResponseDataShipFrameRequirements';

/**
 * The engine determines how quickly a ship travels between waypoints.
 * @export
 * @interface Register201ResponseDataShipEngine
 */
export interface Register201ResponseDataShipEngine {
    /**
     * The symbol of the engine.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    symbol: Register201ResponseDataShipEngineSymbolEnum;
    /**
     * The name of the engine.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    name: any | null;
    /**
     * The description of the engine.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    description: any | null;
    /**
     * The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    condition: any | null;
    /**
     * The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    integrity: any | null;
    /**
     * The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    speed: any | null;
    /**
     * 
     * @type {Register201ResponseDataShipFrameRequirements}
     * @memberof Register201ResponseDataShipEngine
     */
    requirements: Register201ResponseDataShipFrameRequirements;
    /**
     * The overall quality of the component, which determines the quality of the component. High quality components return more ships parts and ship plating when a ship is scrapped. But also require more of these parts to repair. This is transparent to the player, as the parts are bought from/sold to the marketplace.
     * @type {any}
     * @memberof Register201ResponseDataShipEngine
     */
    quality: any | null;
}


/**
 * @export
 */
export const Register201ResponseDataShipEngineSymbolEnum = {
    ImpulseDriveI: 'ENGINE_IMPULSE_DRIVE_I',
    IonDriveI: 'ENGINE_ION_DRIVE_I',
    IonDriveIi: 'ENGINE_ION_DRIVE_II',
    HyperDriveI: 'ENGINE_HYPER_DRIVE_I'
} as const;
export type Register201ResponseDataShipEngineSymbolEnum = typeof Register201ResponseDataShipEngineSymbolEnum[keyof typeof Register201ResponseDataShipEngineSymbolEnum];


/**
 * Check if a given object implements the Register201ResponseDataShipEngine interface.
 */
export function instanceOfRegister201ResponseDataShipEngine(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "condition" in value;
    isInstance = isInstance && "integrity" in value;
    isInstance = isInstance && "speed" in value;
    isInstance = isInstance && "requirements" in value;
    isInstance = isInstance && "quality" in value;

    return isInstance;
}

export function Register201ResponseDataShipEngineFromJSON(json: any): Register201ResponseDataShipEngine {
    return Register201ResponseDataShipEngineFromJSONTyped(json, false);
}

export function Register201ResponseDataShipEngineFromJSONTyped(json: any, ignoreDiscriminator: boolean): Register201ResponseDataShipEngine {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'name': json['name'],
        'description': json['description'],
        'condition': json['condition'],
        'integrity': json['integrity'],
        'speed': json['speed'],
        'requirements': Register201ResponseDataShipFrameRequirementsFromJSON(json['requirements']),
        'quality': json['quality'],
    };
}

export function Register201ResponseDataShipEngineToJSON(value?: Register201ResponseDataShipEngine | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'name': value.name,
        'description': value.description,
        'condition': value.condition,
        'integrity': value.integrity,
        'speed': value.speed,
        'requirements': Register201ResponseDataShipFrameRequirementsToJSON(value.requirements),
        'quality': value.quality,
    };
}

